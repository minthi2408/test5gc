/*
Nsmf_EventExposure

Session Management Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// Templates and customized generator are developed by Quang Tung Thai (tqtung@etri.re.kr)

package ee

import (
	"etri5gc/sbi"
	"etri5gc/sbi/models"
	"net/http"
)

//sbi producer handler for DeleteIndividualSubcription
func OnDeleteIndividualSubcription(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	subId := ctx.Param("subId")
	if len(subId) == 0 {
		//subId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32

	successCode, apierr = prod.EE_HandleDeleteIndividualSubcription(subId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for GetIndividualSubcription
func OnGetIndividualSubcription(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	subId := ctx.Param("subId")
	if len(subId) == 0 {
		//subId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32
	var result models.NsmfEventExposure

	successCode, result, apierr = prod.EE_HandleGetIndividualSubcription(subId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for ReplaceIndividualSubcription
func OnReplaceIndividualSubcription(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	subId := ctx.Param("subId")
	if len(subId) == 0 {
		//subId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subId is required",
		}))
		return
	}

	var input models.NsmfEventExposure

	var apierr *sbi.ApiError
	var successCode int32
	var result models.NsmfEventExposure

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.EE_HandleReplaceIndividualSubcription(subId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for CreateIndividualSubcription
func OnCreateIndividualSubcription(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	var input models.NsmfEventExposure

	var apierr *sbi.ApiError
	var successCode int32
	var result models.NsmfEventExposure

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.EE_HandleCreateIndividualSubcription(input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

type Producer interface {
	EE_HandleDeleteIndividualSubcription(subId string) (successCode int32, err *sbi.ApiError)
	EE_HandleGetIndividualSubcription(subId string) (successCode int32, result models.NsmfEventExposure, err *sbi.ApiError)
	EE_HandleReplaceIndividualSubcription(subId string, body models.NsmfEventExposure) (successCode int32, result models.NsmfEventExposure, err *sbi.ApiError)
	EE_HandleCreateIndividualSubcription(body models.NsmfEventExposure) (successCode int32, result models.NsmfEventExposure, err *sbi.ApiError)
}
