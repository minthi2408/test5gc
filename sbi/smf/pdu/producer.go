/*
Nsmf_PDUSession

SMF PDU Session Service. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.1.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// Templates and customized generator are developed by Quang Tung Thai (tqtung@etri.re.kr)

package pdu

import (
	"net/http"
	"etri5gc/sbi"
	"etri5gc/sbi/models"
)

//sbi producer handler for ReleasePduSession
func OnReleasePduSession(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)
	
	pduSessionRef := ctx.Param("pduSessionRef")
	if len(pduSessionRef) == 0 {
		//pduSessionRef is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title: "Bad request",
			Status: http.StatusBadRequest,
			Detail: "pduSessionRef is required",
		}))
		return
	}

	var input models.ReleaseData

	var apierr *sbi.ApiError
	var successCode int32
	var result models.ReleasedData

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.PDU_HandleReleasePduSession(pduSessionRef, &input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}
	

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}


//sbi producer handler for RetrievePduSession
func OnRetrievePduSession(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)
	
	pduSessionRef := ctx.Param("pduSessionRef")
	if len(pduSessionRef) == 0 {
		//pduSessionRef is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title: "Bad request",
			Status: http.StatusBadRequest,
			Detail: "pduSessionRef is required",
		}))
		return
	}

	var input models.RetrieveData

	var apierr *sbi.ApiError
	var successCode int32
	var result models.RetrievedData

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.PDU_HandleRetrievePduSession(pduSessionRef, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}
	

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}


//sbi producer handler for TransferMoData
func OnTransferMoData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)
	
	pduSessionRef := ctx.Param("pduSessionRef")
	if len(pduSessionRef) == 0 {
		//pduSessionRef is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title: "Bad request",
			Status: http.StatusBadRequest,
			Detail: "pduSessionRef is required",
		}))
		return
	}

	var input models.TransferMoDataRequest

	var apierr *sbi.ApiError
	var successCode int32
	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, apierr = prod.PDU_HandleTransferMoData(pduSessionRef, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}
	

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}


//sbi producer handler for UpdatePduSession
func OnUpdatePduSession(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)
	
	pduSessionRef := ctx.Param("pduSessionRef")
	if len(pduSessionRef) == 0 {
		//pduSessionRef is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title: "Bad request",
			Status: http.StatusBadRequest,
			Detail: "pduSessionRef is required",
		}))
		return
	}

	var input models.HsmfUpdateData

	var apierr *sbi.ApiError
	var successCode int32
	var result models.HsmfUpdatedData

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.PDU_HandleUpdatePduSession(pduSessionRef, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}
	

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}


//sbi producer handler for ReleaseSmContext
func OnReleaseSmContext(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)
	
	smContextRef := ctx.Param("smContextRef")
	if len(smContextRef) == 0 {
		//smContextRef is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title: "Bad request",
			Status: http.StatusBadRequest,
			Detail: "smContextRef is required",
		}))
		return
	}

	var input models.SmContextReleaseData

	var apierr *sbi.ApiError
	var successCode int32
	var result models.SmContextReleasedData

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.PDU_HandleReleaseSmContext(smContextRef, &input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}
	

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}


//sbi producer handler for RetrieveSmContext
func OnRetrieveSmContext(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)
	
	smContextRef := ctx.Param("smContextRef")
	if len(smContextRef) == 0 {
		//smContextRef is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title: "Bad request",
			Status: http.StatusBadRequest,
			Detail: "smContextRef is required",
		}))
		return
	}

	var input models.SmContextRetrieveData

	var apierr *sbi.ApiError
	var successCode int32
	var result models.SmContextRetrievedData

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.PDU_HandleRetrieveSmContext(smContextRef, &input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}
	

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}


//sbi producer handler for SendMoData
func OnSendMoData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)
	
	smContextRef := ctx.Param("smContextRef")
	if len(smContextRef) == 0 {
		//smContextRef is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title: "Bad request",
			Status: http.StatusBadRequest,
			Detail: "smContextRef is required",
		}))
		return
	}

	var input models.SendMoDataRequest

	var apierr *sbi.ApiError
	var successCode int32
	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, apierr = prod.PDU_HandleSendMoData(smContextRef, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}
	

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}


//sbi producer handler for UpdateSmContext
func OnUpdateSmContext(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)
	
	smContextRef := ctx.Param("smContextRef")
	if len(smContextRef) == 0 {
		//smContextRef is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title: "Bad request",
			Status: http.StatusBadRequest,
			Detail: "smContextRef is required",
		}))
		return
	}

	var input models.SmContextUpdateData

	var apierr *sbi.ApiError
	var successCode int32
	var result models.SmContextUpdatedData

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.PDU_HandleUpdateSmContext(smContextRef, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}
	

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}


//sbi producer handler for PostPduSessions
func OnPostPduSessions(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)
	

	var input models.PduSessionCreateData

	var apierr *sbi.ApiError
	var successCode int32
	var result models.PduSessionCreatedData

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.PDU_HandlePostPduSessions(input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}
	

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}


//sbi producer handler for PostSmContexts
func OnPostSmContexts(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)
	

	var input models.PostSmContextsRequest

	var apierr *sbi.ApiError
	var successCode int32
	var result models.SmContextCreatedData

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.PDU_HandlePostSmContexts(input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}
	

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}


type Producer interface {
	PDU_HandleReleasePduSession(pduSessionRef string, body *models.ReleaseData) (successCode int32, result models.ReleasedData, err *sbi.ApiError)
	PDU_HandleRetrievePduSession(pduSessionRef string, body models.RetrieveData) (successCode int32, result models.RetrievedData, err *sbi.ApiError)
	PDU_HandleTransferMoData(pduSessionRef string, body models.TransferMoDataRequest) (successCode int32, err *sbi.ApiError)
	PDU_HandleUpdatePduSession(pduSessionRef string, body models.HsmfUpdateData) (successCode int32, result models.HsmfUpdatedData, err *sbi.ApiError)
	PDU_HandleReleaseSmContext(smContextRef string, body *models.SmContextReleaseData) (successCode int32, result models.SmContextReleasedData, err *sbi.ApiError)
	PDU_HandleRetrieveSmContext(smContextRef string, body *models.SmContextRetrieveData) (successCode int32, result models.SmContextRetrievedData, err *sbi.ApiError)
	PDU_HandleSendMoData(smContextRef string, body models.SendMoDataRequest) (successCode int32, err *sbi.ApiError)
	PDU_HandleUpdateSmContext(smContextRef string, body models.SmContextUpdateData) (successCode int32, result models.SmContextUpdatedData, err *sbi.ApiError)
	PDU_HandlePostPduSessions(body models.PduSessionCreateData) (successCode int32, result models.PduSessionCreatedData, err *sbi.ApiError)
	PDU_HandlePostSmContexts(body models.PostSmContextsRequest) (successCode int32, result models.SmContextCreatedData, err *sbi.ApiError)
}


