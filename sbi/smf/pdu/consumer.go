/*
Nsmf_PDUSession

SMF PDU Session Service. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 1.1.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// Templates and customized generator are developed by Quang Tung Thai (tqtung@etri.re.kr)

package pdu

import (
	"etrib5gc/sbi"
	"etrib5gc/sbi/models"
	"fmt"
	"net/http"
	"net/url"
	"strings"
)

const (
	SERVICE_PATH = "{apiRoot}/nsmf-pdusession/v1"
)

/*
@param client sbi.ConsumerClient - for encoding request/encoding response and sending request to remote agent.
@param pduSessionRef PDU session reference
@return *models.ReleasedData,
*/
func ReleasePduSession(client sbi.ConsumerClient, pduSessionRef string, body *models.ReleaseData) (result models.ReleasedData, err error) {

	if len(pduSessionRef) == 0 {
		err = fmt.Errorf("pduSessionRef is required")
		return
	}
	//create a request
	req := sbi.DefaultRequest()
	req.Method = http.MethodPost

	req.Path = fmt.Sprintf("%s/pdu-sessions/{pduSessionRef}/release", SERVICE_PATH)
	req.Path = strings.Replace(req.Path, "{"+"pduSessionRef"+"}", url.PathEscape(pduSessionRef), -1)
	req.Body = body
	req.HeaderParams["Content-Type"] = "multipart/related"
	req.HeaderParams["Accept"] = "application/json, multipart/related, application/problem+json"
	//send the request
	var resp *sbi.Response
	if resp, err = client.Send(req); err != nil {
		return
	}

	//handle the response
	if resp.StatusCode >= 300 {
		if resp.StatusCode == 307 {
			resp.Body = &models.RedirectResponse{}
		}
		if resp.StatusCode == 308 {
			resp.Body = &models.RedirectResponse{}
		}
		if resp.StatusCode == 400 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 403 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 404 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 411 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 413 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 415 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 429 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 500 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 503 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.Body != nil {
			if err = client.DecodeResponse(resp); err == nil {
				err = sbi.NewApiError(resp.StatusCode, resp.Status, resp.Body)
			}
			return
		} else {
			err = fmt.Errorf("%d is unknown to ReleasePduSession", resp.StatusCode)
			return
		}
	}

	resp.Body = &result
	if err = client.DecodeResponse(resp); err == nil {
		err = sbi.NewApiError(resp.StatusCode, resp.Status, resp.Body)
	}
	return
}

/*
@param client sbi.ConsumerClient - for encoding request/encoding response and sending request to remote agent.
@param pduSessionRef PDU session reference
@return *models.RetrievedData,
*/
func RetrievePduSession(client sbi.ConsumerClient, pduSessionRef string, body models.RetrieveData) (result models.RetrievedData, err error) {

	if len(pduSessionRef) == 0 {
		err = fmt.Errorf("pduSessionRef is required")
		return
	}
	//create a request
	req := sbi.DefaultRequest()
	req.Method = http.MethodPost

	req.Path = fmt.Sprintf("%s/pdu-sessions/{pduSessionRef}/retrieve", SERVICE_PATH)
	req.Path = strings.Replace(req.Path, "{"+"pduSessionRef"+"}", url.PathEscape(pduSessionRef), -1)
	req.Body = &body
	req.HeaderParams["Content-Type"] = "application/json"
	req.HeaderParams["Accept"] = "application/json, application/problem+json"
	//send the request
	var resp *sbi.Response
	if resp, err = client.Send(req); err != nil {
		return
	}

	//handle the response
	if resp.StatusCode >= 300 {
		if resp.StatusCode == 307 {
			resp.Body = &models.RedirectResponse{}
		}
		if resp.StatusCode == 308 {
			resp.Body = &models.RedirectResponse{}
		}
		if resp.StatusCode == 400 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 403 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 404 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 411 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 413 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 415 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 429 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 500 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 503 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 504 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.Body != nil {
			if err = client.DecodeResponse(resp); err == nil {
				err = sbi.NewApiError(resp.StatusCode, resp.Status, resp.Body)
			}
			return
		} else {
			err = fmt.Errorf("%d is unknown to RetrievePduSession", resp.StatusCode)
			return
		}
	}

	resp.Body = &result
	if err = client.DecodeResponse(resp); err == nil {
		err = sbi.NewApiError(resp.StatusCode, resp.Status, resp.Body)
	}
	return
}

/*
@param client sbi.ConsumerClient - for encoding request/encoding response and sending request to remote agent.
@param pduSessionRef PDU session reference
@return
*/
func TransferMoData(client sbi.ConsumerClient, pduSessionRef string, body models.TransferMoDataRequest) (err error) {

	if len(pduSessionRef) == 0 {
		err = fmt.Errorf("pduSessionRef is required")
		return
	}
	//create a request
	req := sbi.DefaultRequest()
	req.Method = http.MethodPost

	req.Path = fmt.Sprintf("%s/pdu-sessions/{pduSessionRef}/transfer-mo-data", SERVICE_PATH)
	req.Path = strings.Replace(req.Path, "{"+"pduSessionRef"+"}", url.PathEscape(pduSessionRef), -1)
	req.Body = &body
	req.HeaderParams["Content-Type"] = "multipart/related"
	req.HeaderParams["Accept"] = "application/json, application/problem+json"
	//send the request
	var resp *sbi.Response
	if resp, err = client.Send(req); err != nil {
		return
	}

	//handle the response
	if resp.StatusCode >= 300 {
		if resp.StatusCode == 307 {
			resp.Body = &models.RedirectResponse{}
		}
		if resp.StatusCode == 308 {
			resp.Body = &models.RedirectResponse{}
		}
		if resp.StatusCode == 400 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 401 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 403 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 404 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 411 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 413 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 415 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 429 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 500 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 503 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.Body != nil {
			if err = client.DecodeResponse(resp); err == nil {
				err = sbi.NewApiError(resp.StatusCode, resp.Status, resp.Body)
			}
			return
		} else {
			err = fmt.Errorf("%d is unknown to TransferMoData", resp.StatusCode)
			return
		}
	}

	return
}

/*
@param client sbi.ConsumerClient - for encoding request/encoding response and sending request to remote agent.
@param pduSessionRef PDU session reference
@return *models.HsmfUpdatedData,
*/
func UpdatePduSession(client sbi.ConsumerClient, pduSessionRef string, body models.HsmfUpdateData) (result models.HsmfUpdatedData, err error) {

	if len(pduSessionRef) == 0 {
		err = fmt.Errorf("pduSessionRef is required")
		return
	}
	//create a request
	req := sbi.DefaultRequest()
	req.Method = http.MethodPost

	req.Path = fmt.Sprintf("%s/pdu-sessions/{pduSessionRef}/modify", SERVICE_PATH)
	req.Path = strings.Replace(req.Path, "{"+"pduSessionRef"+"}", url.PathEscape(pduSessionRef), -1)
	req.Body = &body
	req.HeaderParams["Content-Type"] = "multipart/related"
	req.HeaderParams["Accept"] = "application/json, multipart/related, application/problem+json"
	//send the request
	var resp *sbi.Response
	if resp, err = client.Send(req); err != nil {
		return
	}

	//handle the response
	if resp.StatusCode >= 300 {
		if resp.StatusCode == 307 {
			resp.Body = &models.RedirectResponse{}
		}
		if resp.StatusCode == 308 {
			resp.Body = &models.RedirectResponse{}
		}
		if resp.StatusCode == 400 {
			resp.Body = &models.HsmfUpdateError{}
		}
		if resp.StatusCode == 403 {
			resp.Body = &models.HsmfUpdateError{}
		}
		if resp.StatusCode == 404 {
			resp.Body = &models.HsmfUpdateError{}
		}
		if resp.StatusCode == 411 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 413 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 415 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 429 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 500 {
			resp.Body = &models.HsmfUpdateError{}
		}
		if resp.StatusCode == 503 {
			resp.Body = &models.HsmfUpdateError{}
		}
		if resp.Body != nil {
			if err = client.DecodeResponse(resp); err == nil {
				err = sbi.NewApiError(resp.StatusCode, resp.Status, resp.Body)
			}
			return
		} else {
			err = fmt.Errorf("%d is unknown to UpdatePduSession", resp.StatusCode)
			return
		}
	}

	resp.Body = &result
	if err = client.DecodeResponse(resp); err == nil {
		err = sbi.NewApiError(resp.StatusCode, resp.Status, resp.Body)
	}
	return
}

/*
@param client sbi.ConsumerClient - for encoding request/encoding response and sending request to remote agent.
@param smContextRef SM context reference
@return *models.SmContextReleasedData,
*/
func ReleaseSmContext(client sbi.ConsumerClient, smContextRef string, body *models.SmContextReleaseData) (result models.SmContextReleasedData, err error) {

	if len(smContextRef) == 0 {
		err = fmt.Errorf("smContextRef is required")
		return
	}
	//create a request
	req := sbi.DefaultRequest()
	req.Method = http.MethodPost

	req.Path = fmt.Sprintf("%s/sm-contexts/{smContextRef}/release", SERVICE_PATH)
	req.Path = strings.Replace(req.Path, "{"+"smContextRef"+"}", url.PathEscape(smContextRef), -1)
	req.Body = body
	req.HeaderParams["Content-Type"] = "multipart/related"
	req.HeaderParams["Accept"] = "application/json, application/problem+json"
	//send the request
	var resp *sbi.Response
	if resp, err = client.Send(req); err != nil {
		return
	}

	//handle the response
	if resp.StatusCode >= 300 {
		if resp.StatusCode == 307 {
			resp.Body = &models.RedirectResponse{}
		}
		if resp.StatusCode == 308 {
			resp.Body = &models.RedirectResponse{}
		}
		if resp.StatusCode == 400 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 403 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 404 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 411 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 413 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 415 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 429 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 500 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 503 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.Body != nil {
			if err = client.DecodeResponse(resp); err == nil {
				err = sbi.NewApiError(resp.StatusCode, resp.Status, resp.Body)
			}
			return
		} else {
			err = fmt.Errorf("%d is unknown to ReleaseSmContext", resp.StatusCode)
			return
		}
	}

	resp.Body = &result
	if err = client.DecodeResponse(resp); err == nil {
		err = sbi.NewApiError(resp.StatusCode, resp.Status, resp.Body)
	}
	return
}

/*
@param client sbi.ConsumerClient - for encoding request/encoding response and sending request to remote agent.
@param smContextRef SM context reference
@return *models.SmContextRetrievedData,
*/
func RetrieveSmContext(client sbi.ConsumerClient, smContextRef string, body *models.SmContextRetrieveData) (result models.SmContextRetrievedData, err error) {

	if len(smContextRef) == 0 {
		err = fmt.Errorf("smContextRef is required")
		return
	}
	//create a request
	req := sbi.DefaultRequest()
	req.Method = http.MethodPost

	req.Path = fmt.Sprintf("%s/sm-contexts/{smContextRef}/retrieve", SERVICE_PATH)
	req.Path = strings.Replace(req.Path, "{"+"smContextRef"+"}", url.PathEscape(smContextRef), -1)
	req.Body = body
	req.HeaderParams["Content-Type"] = "application/json"
	req.HeaderParams["Accept"] = "application/json, application/problem+json"
	//send the request
	var resp *sbi.Response
	if resp, err = client.Send(req); err != nil {
		return
	}

	//handle the response
	if resp.StatusCode >= 300 {
		if resp.StatusCode == 307 {
			resp.Body = &models.RedirectResponse{}
		}
		if resp.StatusCode == 308 {
			resp.Body = &models.RedirectResponse{}
		}
		if resp.StatusCode == 400 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 403 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 404 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 411 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 413 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 415 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 429 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 500 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 503 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 504 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.Body != nil {
			if err = client.DecodeResponse(resp); err == nil {
				err = sbi.NewApiError(resp.StatusCode, resp.Status, resp.Body)
			}
			return
		} else {
			err = fmt.Errorf("%d is unknown to RetrieveSmContext", resp.StatusCode)
			return
		}
	}

	resp.Body = &result
	if err = client.DecodeResponse(resp); err == nil {
		err = sbi.NewApiError(resp.StatusCode, resp.Status, resp.Body)
	}
	return
}

/*
@param client sbi.ConsumerClient - for encoding request/encoding response and sending request to remote agent.
@param smContextRef SM context reference
@return
*/
func SendMoData(client sbi.ConsumerClient, smContextRef string, body models.SendMoDataRequest) (err error) {

	if len(smContextRef) == 0 {
		err = fmt.Errorf("smContextRef is required")
		return
	}
	//create a request
	req := sbi.DefaultRequest()
	req.Method = http.MethodPost

	req.Path = fmt.Sprintf("%s/sm-contexts/{smContextRef}/send-mo-data", SERVICE_PATH)
	req.Path = strings.Replace(req.Path, "{"+"smContextRef"+"}", url.PathEscape(smContextRef), -1)
	req.Body = &body
	req.HeaderParams["Content-Type"] = "multipart/related"
	req.HeaderParams["Accept"] = "application/json, application/problem+json"
	//send the request
	var resp *sbi.Response
	if resp, err = client.Send(req); err != nil {
		return
	}

	//handle the response
	if resp.StatusCode >= 300 {
		if resp.StatusCode == 307 {
			resp.Body = &models.RedirectResponse{}
		}
		if resp.StatusCode == 308 {
			resp.Body = &models.RedirectResponse{}
		}
		if resp.StatusCode == 400 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 401 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 403 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 404 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 411 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 413 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 415 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 429 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 500 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 503 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.Body != nil {
			if err = client.DecodeResponse(resp); err == nil {
				err = sbi.NewApiError(resp.StatusCode, resp.Status, resp.Body)
			}
			return
		} else {
			err = fmt.Errorf("%d is unknown to SendMoData", resp.StatusCode)
			return
		}
	}

	return
}

/*
@param client sbi.ConsumerClient - for encoding request/encoding response and sending request to remote agent.
@param smContextRef SM context reference
@return *models.SmContextUpdatedData,
*/
func UpdateSmContext(client sbi.ConsumerClient, smContextRef string, body models.SmContextUpdateData) (result models.SmContextUpdatedData, err error) {

	if len(smContextRef) == 0 {
		err = fmt.Errorf("smContextRef is required")
		return
	}
	//create a request
	req := sbi.DefaultRequest()
	req.Method = http.MethodPost

	req.Path = fmt.Sprintf("%s/sm-contexts/{smContextRef}/modify", SERVICE_PATH)
	req.Path = strings.Replace(req.Path, "{"+"smContextRef"+"}", url.PathEscape(smContextRef), -1)
	req.Body = &body
	req.HeaderParams["Content-Type"] = "multipart/related"
	req.HeaderParams["Accept"] = "application/json, multipart/related, application/problem+json"
	//send the request
	var resp *sbi.Response
	if resp, err = client.Send(req); err != nil {
		return
	}

	//handle the response
	if resp.StatusCode >= 300 {
		if resp.StatusCode == 307 {
			resp.Body = &models.RedirectResponse{}
		}
		if resp.StatusCode == 308 {
			resp.Body = &models.RedirectResponse{}
		}
		if resp.StatusCode == 400 {
			resp.Body = &models.SmContextUpdateError{}
		}
		if resp.StatusCode == 403 {
			resp.Body = &models.SmContextUpdateError{}
		}
		if resp.StatusCode == 404 {
			resp.Body = &models.SmContextUpdateError{}
		}
		if resp.StatusCode == 411 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 413 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 415 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 429 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 500 {
			resp.Body = &models.SmContextUpdateError{}
		}
		if resp.StatusCode == 503 {
			resp.Body = &models.SmContextUpdateError{}
		}
		if resp.Body != nil {
			if err = client.DecodeResponse(resp); err == nil {
				err = sbi.NewApiError(resp.StatusCode, resp.Status, resp.Body)
			}
			return
		} else {
			err = fmt.Errorf("%d is unknown to UpdateSmContext", resp.StatusCode)
			return
		}
	}

	resp.Body = &result
	if err = client.DecodeResponse(resp); err == nil {
		err = sbi.NewApiError(resp.StatusCode, resp.Status, resp.Body)
	}
	return
}

/*
@param client sbi.ConsumerClient - for encoding request/encoding response and sending request to remote agent.
@return *models.PduSessionCreatedData,
*/
func PostPduSessions(client sbi.ConsumerClient, body models.PduSessionCreateData) (result models.PduSessionCreatedData, err error) {

	//create a request
	req := sbi.DefaultRequest()
	req.Method = http.MethodPost

	req.Path = fmt.Sprintf("%s/pdu-sessions", SERVICE_PATH)
	req.Body = &body
	req.HeaderParams["Content-Type"] = "multipart/related"
	req.HeaderParams["Accept"] = "application/json, multipart/related, application/problem+json"
	//send the request
	var resp *sbi.Response
	if resp, err = client.Send(req); err != nil {
		return
	}

	//handle the response
	if resp.StatusCode >= 300 {
		if resp.StatusCode == 307 {
			resp.Body = &models.RedirectResponse{}
		}
		if resp.StatusCode == 308 {
			resp.Body = &models.RedirectResponse{}
		}
		if resp.StatusCode == 400 {
			resp.Body = &models.PduSessionCreateError{}
		}
		if resp.StatusCode == 403 {
			resp.Body = &models.PduSessionCreateError{}
		}
		if resp.StatusCode == 404 {
			resp.Body = &models.PduSessionCreateError{}
		}
		if resp.StatusCode == 411 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 413 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 415 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 429 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 500 {
			resp.Body = &models.PduSessionCreateError{}
		}
		if resp.StatusCode == 503 {
			resp.Body = &models.PduSessionCreateError{}
		}
		if resp.Body != nil {
			if err = client.DecodeResponse(resp); err == nil {
				err = sbi.NewApiError(resp.StatusCode, resp.Status, resp.Body)
			}
			return
		} else {
			err = fmt.Errorf("%d is unknown to PostPduSessions", resp.StatusCode)
			return
		}
	}

	resp.Body = &result
	if err = client.DecodeResponse(resp); err == nil {
		err = sbi.NewApiError(resp.StatusCode, resp.Status, resp.Body)
	}
	return
}

/*
@param client sbi.ConsumerClient - for encoding request/encoding response and sending request to remote agent.
@return *models.SmContextCreatedData,
*/
func PostSmContexts(client sbi.ConsumerClient, body models.PostSmContextsRequest) (result models.SmContextCreatedData, err error) {

	//create a request
	req := sbi.DefaultRequest()
	req.Method = http.MethodPost

	req.Path = fmt.Sprintf("%s/sm-contexts", SERVICE_PATH)
	req.Body = &body
	req.HeaderParams["Content-Type"] = "multipart/related"
	req.HeaderParams["Accept"] = "application/json, multipart/related, application/problem+json"
	//send the request
	var resp *sbi.Response
	if resp, err = client.Send(req); err != nil {
		return
	}

	//handle the response
	if resp.StatusCode >= 300 {
		if resp.StatusCode == 307 {
			resp.Body = &models.RedirectResponse{}
		}
		if resp.StatusCode == 308 {
			resp.Body = &models.RedirectResponse{}
		}
		if resp.StatusCode == 400 {
			resp.Body = &models.SmContextCreateError{}
		}
		if resp.StatusCode == 403 {
			resp.Body = &models.SmContextCreateError{}
		}
		if resp.StatusCode == 404 {
			resp.Body = &models.SmContextCreateError{}
		}
		if resp.StatusCode == 411 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 413 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 415 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 429 {
			resp.Body = &models.ExtProblemDetails{}
		}
		if resp.StatusCode == 500 {
			resp.Body = &models.SmContextCreateError{}
		}
		if resp.StatusCode == 503 {
			resp.Body = &models.SmContextCreateError{}
		}
		if resp.StatusCode == 504 {
			resp.Body = &models.SmContextCreateError{}
		}
		if resp.Body != nil {
			if err = client.DecodeResponse(resp); err == nil {
				err = sbi.NewApiError(resp.StatusCode, resp.Status, resp.Body)
			}
			return
		} else {
			err = fmt.Errorf("%d is unknown to PostSmContexts", resp.StatusCode)
			return
		}
	}

	resp.Body = &result
	if err = client.DecodeResponse(resp); err == nil {
		err = sbi.NewApiError(resp.StatusCode, resp.Status, resp.Body)
	}
	return
}
