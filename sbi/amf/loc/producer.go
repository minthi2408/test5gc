/*
Namf_Location

AMF Location Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.1.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// Templates and customized generator are developed by Quang Tung Thai (tqtung@etri.re.kr)

package loc

import (
	"net/http"
	"etri5gc/sbi"
	"etri5gc/sbi/models"
)

//sbi producer handler for CancelLocation
func OnCancelLocation(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)
	
	ueContextId := ctx.Param("ueContextId")
	if len(ueContextId) == 0 {
		//ueContextId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title: "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueContextId is required",
		}))
		return
	}

	var input models.CancelPosInfo

	var apierr *sbi.ApiError
	var successCode int32
	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, apierr = prod.LOC_HandleCancelLocation(ueContextId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}
	

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}


//sbi producer handler for ProvideLocationInfo
func OnProvideLocationInfo(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)
	
	ueContextId := ctx.Param("ueContextId")
	if len(ueContextId) == 0 {
		//ueContextId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title: "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueContextId is required",
		}))
		return
	}

	var input models.RequestLocInfo

	var apierr *sbi.ApiError
	var successCode int32
	var result models.ProvideLocInfo

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.LOC_HandleProvideLocationInfo(ueContextId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}
	

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}


//sbi producer handler for ProvidePositioningInfo
func OnProvidePositioningInfo(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)
	
	ueContextId := ctx.Param("ueContextId")
	if len(ueContextId) == 0 {
		//ueContextId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title: "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueContextId is required",
		}))
		return
	}

	var input models.RequestPosInfo

	var apierr *sbi.ApiError
	var successCode int32
	var result models.ProvidePosInfo

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.LOC_HandleProvidePositioningInfo(ueContextId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}
	

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}


type Producer interface {
	LOC_HandleCancelLocation(ueContextId string, body models.CancelPosInfo) (successCode int32, err *sbi.ApiError)
	LOC_HandleProvideLocationInfo(ueContextId string, body models.RequestLocInfo) (successCode int32, result models.ProvideLocInfo, err *sbi.ApiError)
	LOC_HandleProvidePositioningInfo(ueContextId string, body models.RequestPosInfo) (successCode int32, result models.ProvidePosInfo, err *sbi.ApiError)
}


