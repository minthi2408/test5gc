/*
Namf_EventExposure

AMF Event Exposure Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.1.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// Templates and customized generator are developed by Quang Tung Thai (tqtung@etri.re.kr)

package ee

import (
	"net/http"
	"etri5gc/sbi"
	"etri5gc/sbi/models"
)

//sbi producer handler for DeleteSubscription
func OnDeleteSubscription(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)
	
	subscriptionId := ctx.Param("subscriptionId")
	if len(subscriptionId) == 0 {
		//subscriptionId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title: "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subscriptionId is required",
		}))
		return
	}

	

	var apierr *sbi.ApiError
	var successCode int32

	successCode, apierr = prod.EE_HandleDeleteSubscription(subscriptionId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}


//sbi producer handler for ModifySubscription
func OnModifySubscription(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)
	
	subscriptionId := ctx.Param("subscriptionId")
	if len(subscriptionId) == 0 {
		//subscriptionId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title: "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subscriptionId is required",
		}))
		return
	}

	var input models.ModifySubscriptionRequest

	var apierr *sbi.ApiError
	var successCode int32
	var result models.AmfUpdatedEventSubscription

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.EE_HandleModifySubscription(subscriptionId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}
	

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}


//sbi producer handler for CreateSubscription
func OnCreateSubscription(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)
	

	var input models.AmfCreateEventSubscription

	var apierr *sbi.ApiError
	var successCode int32
	var result models.AmfCreatedEventSubscription

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.EE_HandleCreateSubscription(input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}
	

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}


type Producer interface {
	EE_HandleDeleteSubscription(subscriptionId string) (successCode int32, err *sbi.ApiError)
	EE_HandleModifySubscription(subscriptionId string, body models.ModifySubscriptionRequest) (successCode int32, result models.AmfUpdatedEventSubscription, err *sbi.ApiError)
	EE_HandleCreateSubscription(body models.AmfCreateEventSubscription) (successCode int32, result models.AmfCreatedEventSubscription, err *sbi.ApiError)
}


