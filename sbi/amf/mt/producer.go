/*
Namf_MT

AMF Mobile Terminated Service Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// Templates and customized generator are developed by Quang Tung Thai (tqtung@etri.re.kr)

package mt

import (
	"etrib5gc/sbi"
	"etrib5gc/sbi/models"
	"etrib5gc/sbi/utils"
	"net/http"
)

//sbi producer handler for ProvideDomainSelectionInfo
func OnProvideDomainSelectionInfo(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueContextId := ctx.Param("ueContextId")
	if len(ueContextId) == 0 {
		//ueContextId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueContextId is required",
		}))
		return
	}
	infoClassStr := ctx.Param("info-class")
	var infoClass *models.UeContextInfoClass
	var infoClassErr error
	if infoClass, infoClassErr = utils.String2UeContextInfoClass(infoClassStr); infoClassErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: infoClassErr.Error(),
		}))
		return
	}

	supportedFeatures := ctx.Param("supported-features")
	oldGuamiStr := ctx.Param("old-guami")
	var oldGuami *models.Guami
	var oldGuamiErr error
	if oldGuami, oldGuamiErr = utils.String2Guami(oldGuamiStr); oldGuamiErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: oldGuamiErr.Error(),
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32
	var result models.UeContextInfo

	successCode, result, apierr = prod.MT_HandleProvideDomainSelectionInfo(ueContextId, infoClass, supportedFeatures, oldGuami)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for EnableUeReachability
func OnEnableUeReachability(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueContextId := ctx.Param("ueContextId")
	if len(ueContextId) == 0 {
		//ueContextId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueContextId is required",
		}))
		return
	}

	var input models.EnableUeReachabilityReqData

	var apierr *sbi.ApiError
	var successCode int32
	var result models.EnableUeReachabilityRspData

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.MT_HandleEnableUeReachability(ueContextId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

type Producer interface {
	MT_HandleProvideDomainSelectionInfo(ueContextId string, infoClass *models.UeContextInfoClass, supportedFeatures string, oldGuami *models.Guami) (successCode int32, result models.UeContextInfo, err *sbi.ApiError)
	MT_HandleEnableUeReachability(ueContextId string, body models.EnableUeReachabilityReqData) (successCode int32, result models.EnableUeReachabilityRspData, err *sbi.ApiError)
}
