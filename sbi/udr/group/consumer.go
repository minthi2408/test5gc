/*
Nudr_GroupIDmap

Unified Data Repository Service for NF-Group ID retrieval. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// Templates and customized generator are developed by Quang Tung Thai (tqtung@etri.re.kr)

package group

import (
	"etri5gc/sbi"
	"etri5gc/sbi/models"
	"etri5gc/sbi/utils"
	"fmt"
	"net/http"
)

const (
	SERVICE_PATH = "{apiRoot}/nudr-group-id-map/v1"
)

/*
@param client sbi.ConsumerClient - for encoding request/encoding response and sending request to remote agent.
@param nfType Type of NF
@param subscriberId Identifier of the subscriber
@return map[string]string,
*/
func GetNfGroupIDs(client sbi.ConsumerClient, nfType []models.NFType, subscriberId string) (result map[string]string, err error) {

	nfTypeStr := utils.Param2String(nfType)
	if len(nfTypeStr) == 0 {
		err = fmt.Errorf("nfType is required")
		return
	}
	if len(subscriberId) == 0 {
		err = fmt.Errorf("subscriberId is required")
		return
	}
	//create a request
	req := sbi.DefaultRequest()
	req.Method = http.MethodGet

	req.Path = fmt.Sprintf("%s/nf-group-ids", SERVICE_PATH)
	req.QueryParams.Add("nf-type", nfTypeStr)

	req.QueryParams.Add("subscriberId", subscriberId)

	req.HeaderParams["Accept"] = "application/json, application/problem+json"
	//send the request
	var resp *sbi.Response
	if resp, err = client.Send(req); err != nil {
		return
	}

	//handle the response
	if resp.StatusCode >= 300 {
		if resp.StatusCode == 404 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.Body != nil {
			if err = client.DecodeResponse(resp); err == nil {
				err = sbi.NewApiError(resp.StatusCode, resp.Status, resp.Body)
			}
			return
		} else {
			err = fmt.Errorf("%d is unknown to GetNfGroupIDs", resp.StatusCode)
			return
		}
	}

	resp.Body = &result
	if err = client.DecodeResponse(resp); err == nil {
		err = sbi.NewApiError(resp.StatusCode, resp.Status, resp.Body)
	}
	return
}
