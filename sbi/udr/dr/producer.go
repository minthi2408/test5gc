/*
Nudr_DataRepository API OpenAPI file

Unified Data Repository Service. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 2.1.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// Templates and customized generator are developed by Quang Tung Thai (tqtung@etri.re.kr)

package dr

import (
	"etrib5gc/sbi"
	"etrib5gc/sbi/models"
	"etrib5gc/sbi/utils"
	"net/http"
)

//sbi producer handler for AmfContext3gpp
func OnAmfContext3gpp(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")

	var input []models.PatchItem

	var apierr *sbi.ApiError
	var successCode int32
	var result models.PatchResult

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleAmfContext3gpp(ueId, supportedFeatures, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for CreateAmfContext3gpp
func OnCreateAmfContext3gpp(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}

	var input models.Amf3GppAccessRegistration

	var apierr *sbi.ApiError
	var successCode int32
	var result models.Amf3GppAccessRegistration

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleCreateAmfContext3gpp(ueId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for QueryAmfContext3gpp
func OnQueryAmfContext3gpp(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	fieldsStr := ctx.Param("fields")
	var fields []string
	var fieldsErr error
	if fields, fieldsErr = utils.String2ArrayOfstring(fieldsStr); fieldsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: fieldsErr.Error(),
		}))
		return
	}

	supportedFeatures := ctx.Param("supported-features")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.Amf3GppAccessRegistration

	successCode, result, apierr = prod.DR_HandleQueryAmfContext3gpp(ueId, fields, supportedFeatures)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for AmfContextNon3gpp
func OnAmfContextNon3gpp(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")

	var input []models.PatchItem

	var apierr *sbi.ApiError
	var successCode int32
	var result models.PatchResult

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleAmfContextNon3gpp(ueId, supportedFeatures, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for CreateAmfContextNon3gpp
func OnCreateAmfContextNon3gpp(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}

	var input models.AmfNon3GppAccessRegistration

	var apierr *sbi.ApiError
	var successCode int32
	var result models.Amf3GppAccessRegistration

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleCreateAmfContextNon3gpp(ueId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for QueryAmfContextNon3gpp
func OnQueryAmfContextNon3gpp(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	fieldsStr := ctx.Param("fields")
	var fields []string
	var fieldsErr error
	if fields, fieldsErr = utils.String2ArrayOfstring(fieldsStr); fieldsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: fieldsErr.Error(),
		}))
		return
	}

	supportedFeatures := ctx.Param("supported-features")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.AmfNon3GppAccessRegistration

	successCode, result, apierr = prod.DR_HandleQueryAmfContextNon3gpp(ueId, fields, supportedFeatures)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for CreateAMFSubscriptions
func OnCreateAMFSubscriptions(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	subsId := ctx.Param("subsId")
	if len(subsId) == 0 {
		//subsId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subsId is required",
		}))
		return
	}

	var input []models.AmfSubscriptionInfo

	var apierr *sbi.ApiError
	var successCode int32
	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, apierr = prod.DR_HandleCreateAMFSubscriptions(ueId, subsId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for CreateOrReplaceAccessAndMobilityData
func OnCreateOrReplaceAccessAndMobilityData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}

	var input models.AccessAndMobilityData

	var apierr *sbi.ApiError
	var successCode int32
	var result models.AccessAndMobilityData

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleCreateOrReplaceAccessAndMobilityData(ueId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for DeleteAccessAndMobilityData
func OnDeleteAccessAndMobilityData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32

	successCode, apierr = prod.DR_HandleDeleteAccessAndMobilityData(ueId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for QueryAccessAndMobilityData
func OnQueryAccessAndMobilityData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	suppFeat := ctx.Param("supp-feat")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.AccessAndMobilityData

	successCode, result, apierr = prod.DR_HandleQueryAccessAndMobilityData(ueId, suppFeat)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for UpdateAccessAndMobilityData
func OnUpdateAccessAndMobilityData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}

	var input models.AccessAndMobilityData

	var apierr *sbi.ApiError
	var successCode int32
	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, apierr = prod.DR_HandleUpdateAccessAndMobilityData(ueId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for ReadAccessAndMobilityPolicyData
func OnReadAccessAndMobilityPolicyData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32
	var result models.AmPolicyData

	successCode, result, apierr = prod.DR_HandleReadAccessAndMobilityPolicyData(ueId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for QueryAmData
func OnQueryAmData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	servingPlmnId := ctx.Param("servingPlmnId")
	if len(servingPlmnId) == 0 {
		//servingPlmnId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "servingPlmnId is required",
		}))
		return
	}
	fieldsStr := ctx.Param("fields")
	var fields []string
	var fieldsErr error
	if fields, fieldsErr = utils.String2ArrayOfstring(fieldsStr); fieldsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: fieldsErr.Error(),
		}))
		return
	}

	supportedFeatures := ctx.Param("supported-features")
	ifNoneMatch := ctx.Param("If-None-Match")
	ifModifiedSince := ctx.Param("If-Modified-Since")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.AccessAndMobilitySubscriptionData

	successCode, result, apierr = prod.DR_HandleQueryAmData(ueId, servingPlmnId, fields, supportedFeatures, ifNoneMatch, ifModifiedSince)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for ModifyAmfSubscriptionInfo
func OnModifyAmfSubscriptionInfo(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	subsId := ctx.Param("subsId")
	if len(subsId) == 0 {
		//subsId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subsId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")

	var input []models.PatchItem

	var apierr *sbi.ApiError
	var successCode int32
	var result models.PatchResult

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleModifyAmfSubscriptionInfo(ueId, subsId, supportedFeatures, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for CreateIndividualApplicationDataSubscription
func OnCreateIndividualApplicationDataSubscription(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	var input models.ApplicationDataSubs

	var apierr *sbi.ApiError
	var successCode int32
	var result models.ApplicationDataSubs

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleCreateIndividualApplicationDataSubscription(input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for ReadApplicationDataChangeSubscriptions
func OnReadApplicationDataChangeSubscriptions(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	dataFilterStr := ctx.Param("data-filter")
	var dataFilter *models.DataFilter
	var dataFilterErr error
	if dataFilter, dataFilterErr = utils.String2DataFilter(dataFilterStr); dataFilterErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: dataFilterErr.Error(),
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32
	var result []models.ApplicationDataSubs

	successCode, result, apierr = prod.DR_HandleReadApplicationDataChangeSubscriptions(dataFilter)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for DeleteAuthenticationStatus
func OnDeleteAuthenticationStatus(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32

	successCode, apierr = prod.DR_HandleDeleteAuthenticationStatus(ueId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for QueryAuthenticationStatus
func OnQueryAuthenticationStatus(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	fieldsStr := ctx.Param("fields")
	var fields []string
	var fieldsErr error
	if fields, fieldsErr = utils.String2ArrayOfstring(fieldsStr); fieldsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: fieldsErr.Error(),
		}))
		return
	}

	supportedFeatures := ctx.Param("supported-features")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.AuthEvent

	successCode, result, apierr = prod.DR_HandleQueryAuthenticationStatus(ueId, fields, supportedFeatures)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for QueryAuthSubsData
func OnQueryAuthSubsData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.AuthenticationSubscription

	successCode, result, apierr = prod.DR_HandleQueryAuthSubsData(ueId, supportedFeatures)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for CreateAuthenticationSoR
func OnCreateAuthenticationSoR(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")

	var input models.SorData

	var apierr *sbi.ApiError
	var successCode int32
	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, apierr = prod.DR_HandleCreateAuthenticationSoR(ueId, supportedFeatures, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for QueryAuthSoR
func OnQueryAuthSoR(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.SorData

	successCode, result, apierr = prod.DR_HandleQueryAuthSoR(ueId, supportedFeatures)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for CreateAuthenticationStatus
func OnCreateAuthenticationStatus(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}

	var input models.AuthEvent

	var apierr *sbi.ApiError
	var successCode int32
	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, apierr = prod.DR_HandleCreateAuthenticationStatus(ueId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for ModifyAuthenticationSubscription
func OnModifyAuthenticationSubscription(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")

	var input []models.PatchItem

	var apierr *sbi.ApiError
	var successCode int32
	var result models.PatchResult

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleModifyAuthenticationSubscription(ueId, supportedFeatures, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for CreateAuthenticationUPU
func OnCreateAuthenticationUPU(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")

	var input models.UpuData

	var apierr *sbi.ApiError
	var successCode int32
	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, apierr = prod.DR_HandleCreateAuthenticationUPU(ueId, supportedFeatures, &input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for QueryAuthUPU
func OnQueryAuthUPU(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.UpuData

	successCode, result, apierr = prod.DR_HandleQueryAuthUPU(ueId, supportedFeatures)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for ReadBdtData
func OnReadBdtData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	bdtRefIdsStr := ctx.Param("bdt-ref-ids")
	var bdtRefIds []string
	var bdtRefIdsErr error
	if bdtRefIds, bdtRefIdsErr = utils.String2ArrayOfstring(bdtRefIdsStr); bdtRefIdsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: bdtRefIdsErr.Error(),
		}))
		return
	}

	suppFeat := ctx.Param("supp-feat")

	var apierr *sbi.ApiError
	var successCode int32
	var result []models.BdtData

	successCode, result, apierr = prod.DR_HandleReadBdtData(bdtRefIds, suppFeat)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for ReadBdtPolicyData
func OnReadBdtPolicyData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	bdtPolicyIdsStr := ctx.Param("bdt-policy-ids")
	var bdtPolicyIds []string
	var bdtPolicyIdsErr error
	if bdtPolicyIds, bdtPolicyIdsErr = utils.String2ArrayOfstring(bdtPolicyIdsStr); bdtPolicyIdsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: bdtPolicyIdsErr.Error(),
		}))
		return
	}

	internalGroupIdsStr := ctx.Param("internal-group-ids")
	var internalGroupIds []string
	var internalGroupIdsErr error
	if internalGroupIds, internalGroupIdsErr = utils.String2ArrayOfstring(internalGroupIdsStr); internalGroupIdsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: internalGroupIdsErr.Error(),
		}))
		return
	}

	supisStr := ctx.Param("supis")
	var supis []string
	var supisErr error
	if supis, supisErr = utils.String2ArrayOfstring(supisStr); supisErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: supisErr.Error(),
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32
	var result []models.BdtPolicyData

	successCode, result, apierr = prod.DR_HandleReadBdtPolicyData(bdtPolicyIds, internalGroupIds, supis)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for QueryCagAck
func OnQueryCagAck(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.CagAckData

	successCode, result, apierr = prod.DR_HandleQueryCagAck(ueId, supportedFeatures)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for CreateCagUpdateAck
func OnCreateCagUpdateAck(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")

	var input models.CagAckData

	var apierr *sbi.ApiError
	var successCode int32
	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, apierr = prod.DR_HandleCreateCagUpdateAck(ueId, supportedFeatures, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for Query5GVnGroupInternal
func OnQuery5GVnGroupInternal(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	internalGroupIdsStr := ctx.Param("internal-group-ids")
	if len(internalGroupIdsStr) == 0 {
		//internalGroupIds is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "internalGroupIds is required",
		}))
		return
	}
	var internalGroupIds []string
	var internalGroupIdsErr error
	if internalGroupIds, internalGroupIdsErr = utils.String2ArrayOfstring(internalGroupIdsStr); internalGroupIdsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: internalGroupIdsErr.Error(),
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32
	var result map[string]models.Model5GVnGroupConfiguration

	successCode, result, apierr = prod.DR_HandleQuery5GVnGroupInternal(internalGroupIds)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for Query5GVnGroup
func OnQuery5GVnGroup(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	gpsisStr := ctx.Param("gpsis")
	var gpsis []string
	var gpsisErr error
	if gpsis, gpsisErr = utils.String2ArrayOfstring(gpsisStr); gpsisErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: gpsisErr.Error(),
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32
	var result map[string]models.Model5GVnGroupConfiguration

	successCode, result, apierr = prod.DR_HandleQuery5GVnGroup(gpsis)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for Create5GVnGroup
func OnCreate5GVnGroup(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	externalGroupId := ctx.Param("externalGroupId")
	if len(externalGroupId) == 0 {
		//externalGroupId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "externalGroupId is required",
		}))
		return
	}

	var input models.Model5GVnGroupConfiguration

	var apierr *sbi.ApiError
	var successCode int32
	var result models.Model5GVnGroupConfiguration

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleCreate5GVnGroup(externalGroupId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for QueryContextData
func OnQueryContextData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	contextDatasetNamesStr := ctx.Param("context-dataset-names")
	if len(contextDatasetNamesStr) == 0 {
		//contextDatasetNames is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "contextDatasetNames is required",
		}))
		return
	}
	var contextDatasetNames []models.ContextDataSetName
	var contextDatasetNamesErr error
	if contextDatasetNames, contextDatasetNamesErr = utils.String2ArrayOfContextDataSetName(contextDatasetNamesStr); contextDatasetNamesErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: contextDatasetNamesErr.Error(),
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32
	var result models.ContextDataSets

	successCode, result, apierr = prod.DR_HandleQueryContextData(ueId, contextDatasetNames)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for Delete5GVnGroup
func OnDelete5GVnGroup(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	externalGroupId := ctx.Param("externalGroupId")
	if len(externalGroupId) == 0 {
		//externalGroupId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "externalGroupId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32

	successCode, apierr = prod.DR_HandleDelete5GVnGroup(externalGroupId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for QueryCoverageRestrictionData
func OnQueryCoverageRestrictionData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")
	ifNoneMatch := ctx.Param("If-None-Match")
	ifModifiedSince := ctx.Param("If-Modified-Since")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.EnhancedCoverageRestrictionData

	successCode, result, apierr = prod.DR_HandleQueryCoverageRestrictionData(ueId, supportedFeatures, ifNoneMatch, ifModifiedSince)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for RemoveAmfSubscriptionsInfo
func OnRemoveAmfSubscriptionsInfo(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	subsId := ctx.Param("subsId")
	if len(subsId) == 0 {
		//subsId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subsId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32

	successCode, apierr = prod.DR_HandleRemoveAmfSubscriptionsInfo(ueId, subsId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for QueryEEData
func OnQueryEEData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	fieldsStr := ctx.Param("fields")
	var fields []string
	var fieldsErr error
	if fields, fieldsErr = utils.String2ArrayOfstring(fieldsStr); fieldsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: fieldsErr.Error(),
		}))
		return
	}

	supportedFeatures := ctx.Param("supported-features")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.EeProfileData

	successCode, result, apierr = prod.DR_HandleQueryEEData(ueId, fields, supportedFeatures)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for QueryGroupEEData
func OnQueryGroupEEData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueGroupId := ctx.Param("ueGroupId")
	if len(ueGroupId) == 0 {
		//ueGroupId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueGroupId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.EeGroupProfileData

	successCode, result, apierr = prod.DR_HandleQueryGroupEEData(ueGroupId, supportedFeatures)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for ModifyEeGroupSubscription
func OnModifyEeGroupSubscription(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueGroupId := ctx.Param("ueGroupId")
	if len(ueGroupId) == 0 {
		//ueGroupId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueGroupId is required",
		}))
		return
	}
	subsId := ctx.Param("subsId")
	if len(subsId) == 0 {
		//subsId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subsId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")

	var input []models.PatchItem

	var apierr *sbi.ApiError
	var successCode int32
	var result models.PatchResult

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleModifyEeGroupSubscription(ueGroupId, subsId, supportedFeatures, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for QueryEeGroupSubscription
func OnQueryEeGroupSubscription(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueGroupId := ctx.Param("ueGroupId")
	if len(ueGroupId) == 0 {
		//ueGroupId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueGroupId is required",
		}))
		return
	}
	subsId := ctx.Param("subsId")
	if len(subsId) == 0 {
		//subsId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subsId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32
	var result map[string]interface{}

	successCode, result, apierr = prod.DR_HandleQueryEeGroupSubscription(ueGroupId, subsId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for RemoveEeGroupSubscriptions
func OnRemoveEeGroupSubscriptions(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueGroupId := ctx.Param("ueGroupId")
	if len(ueGroupId) == 0 {
		//ueGroupId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueGroupId is required",
		}))
		return
	}
	subsId := ctx.Param("subsId")
	if len(subsId) == 0 {
		//subsId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subsId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32

	successCode, apierr = prod.DR_HandleRemoveEeGroupSubscriptions(ueGroupId, subsId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for UpdateEeGroupSubscriptions
func OnUpdateEeGroupSubscriptions(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueGroupId := ctx.Param("ueGroupId")
	if len(ueGroupId) == 0 {
		//ueGroupId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueGroupId is required",
		}))
		return
	}
	subsId := ctx.Param("subsId")
	if len(subsId) == 0 {
		//subsId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subsId is required",
		}))
		return
	}

	var input models.EeSubscription

	var apierr *sbi.ApiError
	var successCode int32
	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, apierr = prod.DR_HandleUpdateEeGroupSubscriptions(ueGroupId, subsId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for CreateEeGroupSubscriptions
func OnCreateEeGroupSubscriptions(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueGroupId := ctx.Param("ueGroupId")
	if len(ueGroupId) == 0 {
		//ueGroupId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueGroupId is required",
		}))
		return
	}

	var input models.EeSubscription

	var apierr *sbi.ApiError
	var successCode int32
	var result models.EeSubscription

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleCreateEeGroupSubscriptions(ueGroupId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for QueryEeGroupSubscriptions
func OnQueryEeGroupSubscriptions(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueGroupId := ctx.Param("ueGroupId")
	if len(ueGroupId) == 0 {
		//ueGroupId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueGroupId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")

	var apierr *sbi.ApiError
	var successCode int32
	var result []models.EeSubscription

	successCode, result, apierr = prod.DR_HandleQueryEeGroupSubscriptions(ueGroupId, supportedFeatures)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for ModifyEesubscription
func OnModifyEesubscription(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	subsId := ctx.Param("subsId")
	if len(subsId) == 0 {
		//subsId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subsId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")

	var input []models.PatchItem

	var apierr *sbi.ApiError
	var successCode int32
	var result models.PatchResult

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleModifyEesubscription(ueId, subsId, supportedFeatures, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for QueryeeSubscription
func OnQueryeeSubscription(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	subsId := ctx.Param("subsId")
	if len(subsId) == 0 {
		//subsId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subsId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32
	var result map[string]interface{}

	successCode, result, apierr = prod.DR_HandleQueryeeSubscription(ueId, subsId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for RemoveeeSubscriptions
func OnRemoveeeSubscriptions(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	subsId := ctx.Param("subsId")
	if len(subsId) == 0 {
		//subsId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subsId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32

	successCode, apierr = prod.DR_HandleRemoveeeSubscriptions(ueId, subsId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for UpdateEesubscriptions
func OnUpdateEesubscriptions(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	subsId := ctx.Param("subsId")
	if len(subsId) == 0 {
		//subsId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subsId is required",
		}))
		return
	}

	var input models.EeSubscription

	var apierr *sbi.ApiError
	var successCode int32
	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, apierr = prod.DR_HandleUpdateEesubscriptions(ueId, subsId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for CreateEeSubscriptions
func OnCreateEeSubscriptions(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}

	var input models.EeSubscription

	var apierr *sbi.ApiError
	var successCode int32
	var result models.EeSubscription

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleCreateEeSubscriptions(ueId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for Queryeesubscriptions
func OnQueryeesubscriptions(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")

	var apierr *sbi.ApiError
	var successCode int32
	var result []models.EeSubscription

	successCode, result, apierr = prod.DR_HandleQueryeesubscriptions(ueId, supportedFeatures)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for CreateIndividualExposureDataSubscription
func OnCreateIndividualExposureDataSubscription(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	var input models.ExposureDataSubscription

	var apierr *sbi.ApiError
	var successCode int32
	var result models.ExposureDataSubscription

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleCreateIndividualExposureDataSubscription(input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for GetGroupIdentifiers
func OnGetGroupIdentifiers(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	extGroupId := ctx.Param("ext-group-id")
	intGroupId := ctx.Param("int-group-id")
	ueIdIndStr := ctx.Param("ue-id-ind")
	var ueIdInd *bool
	var ueIdIndErr error
	if ueIdInd, ueIdIndErr = utils.String2Bool(ueIdIndStr); ueIdIndErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: ueIdIndErr.Error(),
		}))
		return
	}

	supportedFeatures := ctx.Param("supported-features")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.GroupIdentifiers

	successCode, result, apierr = prod.DR_HandleGetGroupIdentifiers(extGroupId, intGroupId, ueIdInd, supportedFeatures)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for CreateHSSSubscriptions
func OnCreateHSSSubscriptions(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	subsId := ctx.Param("subsId")
	if len(subsId) == 0 {
		//subsId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subsId is required",
		}))
		return
	}

	var input models.HssSubscriptionInfo

	var apierr *sbi.ApiError
	var successCode int32
	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, apierr = prod.DR_HandleCreateHSSSubscriptions(ueId, subsId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for GetHssSubscriptionInfo
func OnGetHssSubscriptionInfo(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	subsId := ctx.Param("subsId")
	if len(subsId) == 0 {
		//subsId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subsId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32
	var result models.SmfSubscriptionInfo

	successCode, result, apierr = prod.DR_HandleGetHssSubscriptionInfo(ueId, subsId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for ModifyHssSubscriptionInfo
func OnModifyHssSubscriptionInfo(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	subsId := ctx.Param("subsId")
	if len(subsId) == 0 {
		//subsId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subsId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")

	var input []models.PatchItem

	var apierr *sbi.ApiError
	var successCode int32
	var result models.PatchResult

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleModifyHssSubscriptionInfo(ueId, subsId, supportedFeatures, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for RemoveHssSubscriptionsInfo
func OnRemoveHssSubscriptionsInfo(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	subsId := ctx.Param("subsId")
	if len(subsId) == 0 {
		//subsId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subsId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32

	successCode, apierr = prod.DR_HandleRemoveHssSubscriptionsInfo(ueId, subsId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for CreateHSSSDMSubscriptions
func OnCreateHSSSDMSubscriptions(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	subsId := ctx.Param("subsId")
	if len(subsId) == 0 {
		//subsId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subsId is required",
		}))
		return
	}

	var input models.HssSubscriptionInfo

	var apierr *sbi.ApiError
	var successCode int32
	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, apierr = prod.DR_HandleCreateHSSSDMSubscriptions(ueId, subsId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for GetHssSDMSubscriptionInfo
func OnGetHssSDMSubscriptionInfo(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	subsId := ctx.Param("subsId")
	if len(subsId) == 0 {
		//subsId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subsId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32
	var result models.SmfSubscriptionInfo

	successCode, result, apierr = prod.DR_HandleGetHssSDMSubscriptionInfo(ueId, subsId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for ModifyHssSDMSubscriptionInfo
func OnModifyHssSDMSubscriptionInfo(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	subsId := ctx.Param("subsId")
	if len(subsId) == 0 {
		//subsId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subsId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")

	var input []models.PatchItem

	var apierr *sbi.ApiError
	var successCode int32
	var result models.PatchResult

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleModifyHssSDMSubscriptionInfo(ueId, subsId, supportedFeatures, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for RemoveHssSDMSubscriptionsInfo
func OnRemoveHssSDMSubscriptionsInfo(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	subsId := ctx.Param("subsId")
	if len(subsId) == 0 {
		//subsId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subsId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32

	successCode, apierr = prod.DR_HandleRemoveHssSDMSubscriptionsInfo(ueId, subsId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for CreateIpSmGwContext
func OnCreateIpSmGwContext(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}

	var input models.IpSmGwRegistration

	var apierr *sbi.ApiError
	var successCode int32
	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, apierr = prod.DR_HandleCreateIpSmGwContext(ueId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for DeleteIpSmGwContext
func OnDeleteIpSmGwContext(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32

	successCode, apierr = prod.DR_HandleDeleteIpSmGwContext(ueId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for ModifyIpSmGwContext
func OnModifyIpSmGwContext(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}

	var input []models.PatchItem

	var apierr *sbi.ApiError
	var successCode int32
	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, apierr = prod.DR_HandleModifyIpSmGwContext(ueId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for QueryIpSmGwContext
func OnQueryIpSmGwContext(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	fieldsStr := ctx.Param("fields")
	var fields []string
	var fieldsErr error
	if fields, fieldsErr = utils.String2ArrayOfstring(fieldsStr); fieldsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: fieldsErr.Error(),
		}))
		return
	}

	supportedFeatures := ctx.Param("supported-features")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.IpSmGwRegistration

	successCode, result, apierr = prod.DR_HandleQueryIpSmGwContext(ueId, fields, supportedFeatures)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for ReadIPTVCongifurationData
func OnReadIPTVCongifurationData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	configIdsStr := ctx.Param("config-ids")
	var configIds []string
	var configIdsErr error
	if configIds, configIdsErr = utils.String2ArrayOfstring(configIdsStr); configIdsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: configIdsErr.Error(),
		}))
		return
	}

	dnnsStr := ctx.Param("dnns")
	var dnns []string
	var dnnsErr error
	if dnns, dnnsErr = utils.String2ArrayOfstring(dnnsStr); dnnsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: dnnsErr.Error(),
		}))
		return
	}

	snssaisStr := ctx.Param("snssais")
	var snssais []models.Snssai
	var snssaisErr error
	if snssais, snssaisErr = utils.String2ArrayOfSnssai(snssaisStr); snssaisErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: snssaisErr.Error(),
		}))
		return
	}

	supisStr := ctx.Param("supis")
	var supis []string
	var supisErr error
	if supis, supisErr = utils.String2ArrayOfstring(supisStr); supisErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: supisErr.Error(),
		}))
		return
	}

	interGroupIdsStr := ctx.Param("inter-group-ids")
	var interGroupIds []string
	var interGroupIdsErr error
	if interGroupIds, interGroupIdsErr = utils.String2ArrayOfstring(interGroupIdsStr); interGroupIdsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: interGroupIdsErr.Error(),
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32
	var result []models.IptvConfigData

	successCode, result, apierr = prod.DR_HandleReadIPTVCongifurationData(configIds, dnns, snssais, supis, interGroupIds)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for DeleteIndividualApplicationDataSubscription
func OnDeleteIndividualApplicationDataSubscription(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	subsId := ctx.Param("subsId")
	if len(subsId) == 0 {
		//subsId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subsId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32

	successCode, apierr = prod.DR_HandleDeleteIndividualApplicationDataSubscription(subsId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for ReadIndividualApplicationDataSubscription
func OnReadIndividualApplicationDataSubscription(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	subsId := ctx.Param("subsId")
	if len(subsId) == 0 {
		//subsId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subsId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32
	var result models.ApplicationDataSubs

	successCode, result, apierr = prod.DR_HandleReadIndividualApplicationDataSubscription(subsId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for ReplaceIndividualApplicationDataSubscription
func OnReplaceIndividualApplicationDataSubscription(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	subsId := ctx.Param("subsId")
	if len(subsId) == 0 {
		//subsId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subsId is required",
		}))
		return
	}

	var input models.ApplicationDataSubs

	var apierr *sbi.ApiError
	var successCode int32
	var result models.ApplicationDataSubs

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleReplaceIndividualApplicationDataSubscription(subsId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for CreateIndividualAppliedBdtPolicyData
func OnCreateIndividualAppliedBdtPolicyData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	bdtPolicyId := ctx.Param("bdtPolicyId")
	if len(bdtPolicyId) == 0 {
		//bdtPolicyId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "bdtPolicyId is required",
		}))
		return
	}

	var input models.BdtPolicyData

	var apierr *sbi.ApiError
	var successCode int32
	var result models.BdtPolicyData

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleCreateIndividualAppliedBdtPolicyData(bdtPolicyId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for DeleteIndividualAppliedBdtPolicyData
func OnDeleteIndividualAppliedBdtPolicyData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	bdtPolicyId := ctx.Param("bdtPolicyId")
	if len(bdtPolicyId) == 0 {
		//bdtPolicyId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "bdtPolicyId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32

	successCode, apierr = prod.DR_HandleDeleteIndividualAppliedBdtPolicyData(bdtPolicyId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for UpdateIndividualAppliedBdtPolicyData
func OnUpdateIndividualAppliedBdtPolicyData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	bdtPolicyId := ctx.Param("bdtPolicyId")
	if len(bdtPolicyId) == 0 {
		//bdtPolicyId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "bdtPolicyId is required",
		}))
		return
	}

	var input models.BdtPolicyDataPatch

	var apierr *sbi.ApiError
	var successCode int32
	var result models.BdtPolicyData

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleUpdateIndividualAppliedBdtPolicyData(bdtPolicyId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for DeleteIndividualAuthenticationStatus
func OnDeleteIndividualAuthenticationStatus(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	servingNetworkName := ctx.Param("servingNetworkName")
	if len(servingNetworkName) == 0 {
		//servingNetworkName is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "servingNetworkName is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32

	successCode, apierr = prod.DR_HandleDeleteIndividualAuthenticationStatus(ueId, servingNetworkName)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for QueryIndividualAuthenticationStatus
func OnQueryIndividualAuthenticationStatus(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	servingNetworkName := ctx.Param("servingNetworkName")
	if len(servingNetworkName) == 0 {
		//servingNetworkName is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "servingNetworkName is required",
		}))
		return
	}
	fieldsStr := ctx.Param("fields")
	var fields []string
	var fieldsErr error
	if fields, fieldsErr = utils.String2ArrayOfstring(fieldsStr); fieldsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: fieldsErr.Error(),
		}))
		return
	}

	supportedFeatures := ctx.Param("supported-features")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.AuthEvent

	successCode, result, apierr = prod.DR_HandleQueryIndividualAuthenticationStatus(ueId, servingNetworkName, fields, supportedFeatures)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for CreateIndividualAuthenticationStatus
func OnCreateIndividualAuthenticationStatus(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	servingNetworkName := ctx.Param("servingNetworkName")
	if len(servingNetworkName) == 0 {
		//servingNetworkName is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "servingNetworkName is required",
		}))
		return
	}

	var input models.AuthEvent

	var apierr *sbi.ApiError
	var successCode int32
	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, apierr = prod.DR_HandleCreateIndividualAuthenticationStatus(ueId, servingNetworkName, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for CreateIndividualBdtData
func OnCreateIndividualBdtData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	bdtReferenceId := ctx.Param("bdtReferenceId")
	if len(bdtReferenceId) == 0 {
		//bdtReferenceId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "bdtReferenceId is required",
		}))
		return
	}

	var input models.BdtData

	var apierr *sbi.ApiError
	var successCode int32
	var result models.BdtData

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleCreateIndividualBdtData(bdtReferenceId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for DeleteIndividualBdtData
func OnDeleteIndividualBdtData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	bdtReferenceId := ctx.Param("bdtReferenceId")
	if len(bdtReferenceId) == 0 {
		//bdtReferenceId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "bdtReferenceId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32

	successCode, apierr = prod.DR_HandleDeleteIndividualBdtData(bdtReferenceId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for ReadIndividualBdtData
func OnReadIndividualBdtData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	bdtReferenceId := ctx.Param("bdtReferenceId")
	if len(bdtReferenceId) == 0 {
		//bdtReferenceId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "bdtReferenceId is required",
		}))
		return
	}
	suppFeat := ctx.Param("supp-feat")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.BdtData

	successCode, result, apierr = prod.DR_HandleReadIndividualBdtData(bdtReferenceId, suppFeat)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for UpdateIndividualBdtData
func OnUpdateIndividualBdtData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	bdtReferenceId := ctx.Param("bdtReferenceId")
	if len(bdtReferenceId) == 0 {
		//bdtReferenceId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "bdtReferenceId is required",
		}))
		return
	}

	var input models.BdtDataPatch

	var apierr *sbi.ApiError
	var successCode int32
	var result models.BdtData

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleUpdateIndividualBdtData(bdtReferenceId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for DeleteIndividualExposureDataSubscription
func OnDeleteIndividualExposureDataSubscription(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	subId := ctx.Param("subId")
	if len(subId) == 0 {
		//subId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32

	successCode, apierr = prod.DR_HandleDeleteIndividualExposureDataSubscription(subId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for ReplaceIndividualExposureDataSubscription
func OnReplaceIndividualExposureDataSubscription(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	subId := ctx.Param("subId")
	if len(subId) == 0 {
		//subId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subId is required",
		}))
		return
	}

	var input models.ExposureDataSubscription

	var apierr *sbi.ApiError
	var successCode int32
	var result models.ExposureDataSubscription

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleReplaceIndividualExposureDataSubscription(subId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for PartialReplaceIndividualIPTVConfigurationData
func OnPartialReplaceIndividualIPTVConfigurationData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	configurationId := ctx.Param("configurationId")
	if len(configurationId) == 0 {
		//configurationId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "configurationId is required",
		}))
		return
	}

	var input models.IptvConfigDataPatch

	var apierr *sbi.ApiError
	var successCode int32
	var result models.IptvConfigData

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandlePartialReplaceIndividualIPTVConfigurationData(configurationId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for CreateOrReplaceIndividualIPTVConfigurationData
func OnCreateOrReplaceIndividualIPTVConfigurationData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	configurationId := ctx.Param("configurationId")
	if len(configurationId) == 0 {
		//configurationId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "configurationId is required",
		}))
		return
	}

	var input models.IptvConfigData

	var apierr *sbi.ApiError
	var successCode int32
	var result models.IptvConfigData

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleCreateOrReplaceIndividualIPTVConfigurationData(configurationId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for DeleteIndividualIPTVConfigurationData
func OnDeleteIndividualIPTVConfigurationData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	configurationId := ctx.Param("configurationId")
	if len(configurationId) == 0 {
		//configurationId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "configurationId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32

	successCode, apierr = prod.DR_HandleDeleteIndividualIPTVConfigurationData(configurationId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for CreateOrReplaceIndividualInfluenceData
func OnCreateOrReplaceIndividualInfluenceData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	influenceId := ctx.Param("influenceId")
	if len(influenceId) == 0 {
		//influenceId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "influenceId is required",
		}))
		return
	}

	var input models.TrafficInfluData

	var apierr *sbi.ApiError
	var successCode int32
	var result models.TrafficInfluData

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleCreateOrReplaceIndividualInfluenceData(influenceId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for DeleteIndividualInfluenceData
func OnDeleteIndividualInfluenceData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	influenceId := ctx.Param("influenceId")
	if len(influenceId) == 0 {
		//influenceId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "influenceId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32

	successCode, apierr = prod.DR_HandleDeleteIndividualInfluenceData(influenceId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for UpdateIndividualInfluenceData
func OnUpdateIndividualInfluenceData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	influenceId := ctx.Param("influenceId")
	if len(influenceId) == 0 {
		//influenceId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "influenceId is required",
		}))
		return
	}

	var input models.TrafficInfluDataPatch

	var apierr *sbi.ApiError
	var successCode int32
	var result models.TrafficInfluData

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleUpdateIndividualInfluenceData(influenceId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for DeleteIndividualInfluenceDataSubscription
func OnDeleteIndividualInfluenceDataSubscription(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	subscriptionId := ctx.Param("subscriptionId")
	if len(subscriptionId) == 0 {
		//subscriptionId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subscriptionId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32

	successCode, apierr = prod.DR_HandleDeleteIndividualInfluenceDataSubscription(subscriptionId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for ReadIndividualInfluenceDataSubscription
func OnReadIndividualInfluenceDataSubscription(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	subscriptionId := ctx.Param("subscriptionId")
	if len(subscriptionId) == 0 {
		//subscriptionId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subscriptionId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32
	var result models.TrafficInfluSub

	successCode, result, apierr = prod.DR_HandleReadIndividualInfluenceDataSubscription(subscriptionId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for ReplaceIndividualInfluenceDataSubscription
func OnReplaceIndividualInfluenceDataSubscription(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	subscriptionId := ctx.Param("subscriptionId")
	if len(subscriptionId) == 0 {
		//subscriptionId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subscriptionId is required",
		}))
		return
	}

	var input models.TrafficInfluSub

	var apierr *sbi.ApiError
	var successCode int32
	var result models.TrafficInfluSub

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleReplaceIndividualInfluenceDataSubscription(subscriptionId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for CreateOrReplaceIndividualPFDData
func OnCreateOrReplaceIndividualPFDData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	appId := ctx.Param("appId")
	if len(appId) == 0 {
		//appId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "appId is required",
		}))
		return
	}

	var input models.PfdDataForAppExt

	var apierr *sbi.ApiError
	var successCode int32
	var result models.PfdDataForAppExt

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleCreateOrReplaceIndividualPFDData(appId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for DeleteIndividualPFDData
func OnDeleteIndividualPFDData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	appId := ctx.Param("appId")
	if len(appId) == 0 {
		//appId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "appId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32

	successCode, apierr = prod.DR_HandleDeleteIndividualPFDData(appId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for ReadIndividualPFDData
func OnReadIndividualPFDData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	appId := ctx.Param("appId")
	if len(appId) == 0 {
		//appId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "appId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32
	var result models.PfdDataForAppExt

	successCode, result, apierr = prod.DR_HandleReadIndividualPFDData(appId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for DeleteIndividualPolicyDataSubscription
func OnDeleteIndividualPolicyDataSubscription(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	subsId := ctx.Param("subsId")
	if len(subsId) == 0 {
		//subsId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subsId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32

	successCode, apierr = prod.DR_HandleDeleteIndividualPolicyDataSubscription(subsId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for ReplaceIndividualPolicyDataSubscription
func OnReplaceIndividualPolicyDataSubscription(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	subsId := ctx.Param("subsId")
	if len(subsId) == 0 {
		//subsId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subsId is required",
		}))
		return
	}

	var input models.PolicyDataSubscription

	var apierr *sbi.ApiError
	var successCode int32
	var result models.PolicyDataSubscription

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleReplaceIndividualPolicyDataSubscription(subsId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for CreateOrReplaceServiceParameterData
func OnCreateOrReplaceServiceParameterData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	serviceParamId := ctx.Param("serviceParamId")
	if len(serviceParamId) == 0 {
		//serviceParamId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "serviceParamId is required",
		}))
		return
	}

	var input models.ServiceParameterData

	var apierr *sbi.ApiError
	var successCode int32
	var result models.ServiceParameterData

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleCreateOrReplaceServiceParameterData(serviceParamId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for DeleteIndividualServiceParameterData
func OnDeleteIndividualServiceParameterData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	serviceParamId := ctx.Param("serviceParamId")
	if len(serviceParamId) == 0 {
		//serviceParamId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "serviceParamId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32

	successCode, apierr = prod.DR_HandleDeleteIndividualServiceParameterData(serviceParamId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for UpdateIndividualServiceParameterData
func OnUpdateIndividualServiceParameterData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	serviceParamId := ctx.Param("serviceParamId")
	if len(serviceParamId) == 0 {
		//serviceParamId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "serviceParamId is required",
		}))
		return
	}

	var input models.ServiceParameterDataPatch

	var apierr *sbi.ApiError
	var successCode int32
	var result models.ServiceParameterData

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleUpdateIndividualServiceParameterData(serviceParamId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for ReadInfluenceData
func OnReadInfluenceData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	influenceIdsStr := ctx.Param("influence-Ids")
	var influenceIds []string
	var influenceIdsErr error
	if influenceIds, influenceIdsErr = utils.String2ArrayOfstring(influenceIdsStr); influenceIdsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: influenceIdsErr.Error(),
		}))
		return
	}

	dnnsStr := ctx.Param("dnns")
	var dnns []string
	var dnnsErr error
	if dnns, dnnsErr = utils.String2ArrayOfstring(dnnsStr); dnnsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: dnnsErr.Error(),
		}))
		return
	}

	snssaisStr := ctx.Param("snssais")
	var snssais []models.Snssai
	var snssaisErr error
	if snssais, snssaisErr = utils.String2ArrayOfSnssai(snssaisStr); snssaisErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: snssaisErr.Error(),
		}))
		return
	}

	internalGroupIdsStr := ctx.Param("internal-Group-Ids")
	var internalGroupIds []string
	var internalGroupIdsErr error
	if internalGroupIds, internalGroupIdsErr = utils.String2ArrayOfstring(internalGroupIdsStr); internalGroupIdsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: internalGroupIdsErr.Error(),
		}))
		return
	}

	supisStr := ctx.Param("supis")
	var supis []string
	var supisErr error
	if supis, supisErr = utils.String2ArrayOfstring(supisStr); supisErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: supisErr.Error(),
		}))
		return
	}

	suppFeat := ctx.Param("supp-feat")

	var apierr *sbi.ApiError
	var successCode int32
	var result []models.TrafficInfluData

	successCode, result, apierr = prod.DR_HandleReadInfluenceData(influenceIds, dnns, snssais, internalGroupIds, supis, suppFeat)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for CreateIndividualInfluenceDataSubscription
func OnCreateIndividualInfluenceDataSubscription(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	var input models.TrafficInfluSub

	var apierr *sbi.ApiError
	var successCode int32
	var result models.TrafficInfluSub

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleCreateIndividualInfluenceDataSubscription(input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for ReadInfluenceDataSubscriptions
func OnReadInfluenceDataSubscriptions(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	dnn := ctx.Param("dnn")
	snssaiStr := ctx.Param("snssai")
	var snssai *models.Snssai
	var snssaiErr error
	if snssai, snssaiErr = utils.String2Snssai(snssaiStr); snssaiErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: snssaiErr.Error(),
		}))
		return
	}

	internalGroupId := ctx.Param("internal-Group-Id")
	supi := ctx.Param("supi")

	var apierr *sbi.ApiError
	var successCode int32
	var result []models.TrafficInfluSub

	successCode, result, apierr = prod.DR_HandleReadInfluenceDataSubscriptions(dnn, snssai, internalGroupId, supi)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for QueryLcsBcaData
func OnQueryLcsBcaData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	servingPlmnId := ctx.Param("servingPlmnId")
	if len(servingPlmnId) == 0 {
		//servingPlmnId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "servingPlmnId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")
	ifNoneMatch := ctx.Param("If-None-Match")
	ifModifiedSince := ctx.Param("If-Modified-Since")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.LcsBroadcastAssistanceTypesData

	successCode, result, apierr = prod.DR_HandleQueryLcsBcaData(ueId, servingPlmnId, supportedFeatures, ifNoneMatch, ifModifiedSince)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for QueryLcsMoData
func OnQueryLcsMoData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	fieldsStr := ctx.Param("fields")
	var fields []string
	var fieldsErr error
	if fields, fieldsErr = utils.String2ArrayOfstring(fieldsStr); fieldsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: fieldsErr.Error(),
		}))
		return
	}

	supportedFeatures := ctx.Param("supported-features")
	ifNoneMatch := ctx.Param("If-None-Match")
	ifModifiedSince := ctx.Param("If-Modified-Since")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.LcsMoData

	successCode, result, apierr = prod.DR_HandleQueryLcsMoData(ueId, fields, supportedFeatures, ifNoneMatch, ifModifiedSince)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for QueryLcsPrivacyData
func OnQueryLcsPrivacyData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	fieldsStr := ctx.Param("fields")
	var fields []string
	var fieldsErr error
	if fields, fieldsErr = utils.String2ArrayOfstring(fieldsStr); fieldsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: fieldsErr.Error(),
		}))
		return
	}

	supportedFeatures := ctx.Param("supported-features")
	ifNoneMatch := ctx.Param("If-None-Match")
	ifModifiedSince := ctx.Param("If-Modified-Since")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.LcsPrivacyData

	successCode, result, apierr = prod.DR_HandleQueryLcsPrivacyData(ueId, fields, supportedFeatures, ifNoneMatch, ifModifiedSince)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for CreateMessageWaitingData
func OnCreateMessageWaitingData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}

	var input models.MessageWaitingData

	var apierr *sbi.ApiError
	var successCode int32
	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, apierr = prod.DR_HandleCreateMessageWaitingData(ueId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for DeleteMessageWaitingData
func OnDeleteMessageWaitingData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32

	successCode, apierr = prod.DR_HandleDeleteMessageWaitingData(ueId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for ModifyMessageWaitingData
func OnModifyMessageWaitingData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}

	var input []models.PatchItem

	var apierr *sbi.ApiError
	var successCode int32
	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, apierr = prod.DR_HandleModifyMessageWaitingData(ueId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for QueryMessageWaitingData
func OnQueryMessageWaitingData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	fieldsStr := ctx.Param("fields")
	var fields []string
	var fieldsErr error
	if fields, fieldsErr = utils.String2ArrayOfstring(fieldsStr); fieldsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: fieldsErr.Error(),
		}))
		return
	}

	supportedFeatures := ctx.Param("supported-features")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.MessageWaitingData

	successCode, result, apierr = prod.DR_HandleQueryMessageWaitingData(ueId, fields, supportedFeatures)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for Modify5GVnGroup
func OnModify5GVnGroup(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	externalGroupId := ctx.Param("externalGroupId")
	if len(externalGroupId) == 0 {
		//externalGroupId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "externalGroupId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")

	var input []models.PatchItem

	var apierr *sbi.ApiError
	var successCode int32
	var result models.PatchResult

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleModify5GVnGroup(externalGroupId, supportedFeatures, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for QueryNssaiAck
func OnQueryNssaiAck(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.NssaiAckData

	successCode, result, apierr = prod.DR_HandleQueryNssaiAck(ueId, supportedFeatures)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for CreateOrUpdateNssaiAck
func OnCreateOrUpdateNssaiAck(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")

	var input models.NssaiAckData

	var apierr *sbi.ApiError
	var successCode int32
	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, apierr = prod.DR_HandleCreateOrUpdateNssaiAck(ueId, supportedFeatures, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for ModifyOperSpecData
func OnModifyOperSpecData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")

	var input []models.PatchItem

	var apierr *sbi.ApiError
	var successCode int32
	var result models.PatchResult

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleModifyOperSpecData(ueId, supportedFeatures, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for QueryOperSpecData
func OnQueryOperSpecData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	fieldsStr := ctx.Param("fields")
	var fields []string
	var fieldsErr error
	if fields, fieldsErr = utils.String2ArrayOfstring(fieldsStr); fieldsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: fieldsErr.Error(),
		}))
		return
	}

	supportedFeatures := ctx.Param("supported-features")
	ifNoneMatch := ctx.Param("If-None-Match")
	ifModifiedSince := ctx.Param("If-Modified-Since")

	var apierr *sbi.ApiError
	var successCode int32
	var result map[string]models.OperatorSpecificDataContainer

	successCode, result, apierr = prod.DR_HandleQueryOperSpecData(ueId, fields, supportedFeatures, ifNoneMatch, ifModifiedSince)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for ReadOperatorSpecificData
func OnReadOperatorSpecificData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	fieldsStr := ctx.Param("fields")
	var fields []string
	var fieldsErr error
	if fields, fieldsErr = utils.String2ArrayOfstring(fieldsStr); fieldsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: fieldsErr.Error(),
		}))
		return
	}

	suppFeat := ctx.Param("supp-feat")

	var apierr *sbi.ApiError
	var successCode int32
	var result map[string]models.OperatorSpecificDataContainer

	successCode, result, apierr = prod.DR_HandleReadOperatorSpecificData(ueId, fields, suppFeat)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for ReplaceOperatorSpecificData
func OnReplaceOperatorSpecificData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}

	var input map[string]models.OperatorSpecificDataContainer

	var apierr *sbi.ApiError
	var successCode int32
	var result map[string]models.OperatorSpecificDataContainer

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleReplaceOperatorSpecificData(ueId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for UpdateOperatorSpecificData
func OnUpdateOperatorSpecificData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}

	var input []models.PatchItem

	var apierr *sbi.ApiError
	var successCode int32
	var result models.PatchResult

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleUpdateOperatorSpecificData(ueId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for ReadPFDData
func OnReadPFDData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	appIdStr := ctx.Param("appId")
	var appId []string
	var appIdErr error
	if appId, appIdErr = utils.String2ArrayOfstring(appIdStr); appIdErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: appIdErr.Error(),
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32
	var result []models.PfdDataForAppExt

	successCode, result, apierr = prod.DR_HandleReadPFDData(appId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for GetppData
func OnGetppData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")
	ifNoneMatch := ctx.Param("If-None-Match")
	ifModifiedSince := ctx.Param("If-Modified-Since")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.PpData

	successCode, result, apierr = prod.DR_HandleGetppData(ueId, supportedFeatures, ifNoneMatch, ifModifiedSince)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for QueryPPData
func OnQueryPPData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.PpProfileData

	successCode, result, apierr = prod.DR_HandleQueryPPData(ueId, supportedFeatures)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for Query5GVNGroupPPData
func OnQuery5GVNGroupPPData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	extGroupIdsStr := ctx.Param("ext-group-ids")
	var extGroupIds []string
	var extGroupIdsErr error
	if extGroupIds, extGroupIdsErr = utils.String2ArrayOfstring(extGroupIdsStr); extGroupIdsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: extGroupIdsErr.Error(),
		}))
		return
	}

	supportedFeatures := ctx.Param("supported-features")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.Pp5gVnGroupProfileData

	successCode, result, apierr = prod.DR_HandleQuery5GVNGroupPPData(extGroupIds, supportedFeatures)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for CreateOrReplaceSessionManagementData
func OnCreateOrReplaceSessionManagementData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	pduSessionIdStr := ctx.Param("pduSessionId")
	if len(pduSessionIdStr) == 0 {
		//pduSessionId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "pduSessionId is required",
		}))
		return
	}
	var pduSessionId *int32
	var pduSessionIdErr error
	if pduSessionId, pduSessionIdErr = utils.String2Int32(pduSessionIdStr); pduSessionIdErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: pduSessionIdErr.Error(),
		}))
		return
	}

	var input models.PduSessionManagementData

	var apierr *sbi.ApiError
	var successCode int32
	var result models.AccessAndMobilityData

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleCreateOrReplaceSessionManagementData(ueId, *pduSessionId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for DeleteSessionManagementData
func OnDeleteSessionManagementData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	pduSessionIdStr := ctx.Param("pduSessionId")
	if len(pduSessionIdStr) == 0 {
		//pduSessionId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "pduSessionId is required",
		}))
		return
	}
	var pduSessionId *int32
	var pduSessionIdErr error
	if pduSessionId, pduSessionIdErr = utils.String2Int32(pduSessionIdStr); pduSessionIdErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: pduSessionIdErr.Error(),
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32

	successCode, apierr = prod.DR_HandleDeleteSessionManagementData(ueId, *pduSessionId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for QuerySessionManagementData
func OnQuerySessionManagementData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	pduSessionIdStr := ctx.Param("pduSessionId")
	if len(pduSessionIdStr) == 0 {
		//pduSessionId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "pduSessionId is required",
		}))
		return
	}
	var pduSessionId *int32
	var pduSessionIdErr error
	if pduSessionId, pduSessionIdErr = utils.String2Int32(pduSessionIdStr); pduSessionIdErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: pduSessionIdErr.Error(),
		}))
		return
	}

	ipv4Addr := ctx.Param("ipv4-addr")
	ipv6Prefix := ctx.Param("ipv6-prefix")
	dnn := ctx.Param("dnn")
	fieldsStr := ctx.Param("fields")
	var fields []string
	var fieldsErr error
	if fields, fieldsErr = utils.String2ArrayOfstring(fieldsStr); fieldsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: fieldsErr.Error(),
		}))
		return
	}

	suppFeat := ctx.Param("supp-feat")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.PduSessionManagementData

	successCode, result, apierr = prod.DR_HandleQuerySessionManagementData(ueId, *pduSessionId, ipv4Addr, ipv6Prefix, dnn, fields, suppFeat)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for ReadPlmnUePolicySet
func OnReadPlmnUePolicySet(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	plmnId := ctx.Param("plmnId")
	if len(plmnId) == 0 {
		//plmnId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "plmnId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32
	var result models.UePolicySet

	successCode, result, apierr = prod.DR_HandleReadPlmnUePolicySet(plmnId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for CreateIndividualPolicyDataSubscription
func OnCreateIndividualPolicyDataSubscription(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	var input models.PolicyDataSubscription

	var apierr *sbi.ApiError
	var successCode int32
	var result models.PolicyDataSubscription

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleCreateIndividualPolicyDataSubscription(input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for QueryProvisionedData
func OnQueryProvisionedData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	servingPlmnId := ctx.Param("servingPlmnId")
	if len(servingPlmnId) == 0 {
		//servingPlmnId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "servingPlmnId is required",
		}))
		return
	}
	datasetNamesStr := ctx.Param("dataset-names")
	var datasetNames []models.DataSetName
	var datasetNamesErr error
	if datasetNames, datasetNamesErr = utils.String2ArrayOfDataSetName(datasetNamesStr); datasetNamesErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: datasetNamesErr.Error(),
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32
	var result models.ProvisionedDataSets

	successCode, result, apierr = prod.DR_HandleQueryProvisionedData(ueId, servingPlmnId, datasetNames)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for ModifyPpData
func OnModifyPpData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")

	var input []models.PatchItem

	var apierr *sbi.ApiError
	var successCode int32
	var result models.PatchResult

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleModifyPpData(ueId, supportedFeatures, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for Get5GVnGroupConfiguration
func OnGet5GVnGroupConfiguration(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	externalGroupId := ctx.Param("externalGroupId")
	if len(externalGroupId) == 0 {
		//externalGroupId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "externalGroupId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32
	var result models.Model5GVnGroupConfiguration

	successCode, result, apierr = prod.DR_HandleGet5GVnGroupConfiguration(externalGroupId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for GetAmfSubscriptionInfo
func OnGetAmfSubscriptionInfo(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	subsId := ctx.Param("subsId")
	if len(subsId) == 0 {
		//subsId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subsId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32
	var result []models.AmfSubscriptionInfo

	successCode, result, apierr = prod.DR_HandleGetAmfSubscriptionInfo(ueId, subsId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for GetIdentityData
func OnGetIdentityData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	appPortIdStr := ctx.Param("app-port-id")
	var appPortId *models.AppPortId
	var appPortIdErr error
	if appPortId, appPortIdErr = utils.String2AppPortId(appPortIdStr); appPortIdErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: appPortIdErr.Error(),
		}))
		return
	}

	ifNoneMatch := ctx.Param("If-None-Match")
	ifModifiedSince := ctx.Param("If-Modified-Since")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.IdentityData

	successCode, result, apierr = prod.DR_HandleGetIdentityData(ueId, appPortId, ifNoneMatch, ifModifiedSince)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for GetNiddAuData
func OnGetNiddAuData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	singleNssaiStr := ctx.Param("single-nssai")
	if len(singleNssaiStr) == 0 {
		//singleNssai is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "singleNssai is required",
		}))
		return
	}
	var singleNssai *models.Snssai
	var singleNssaiErr error
	if singleNssai, singleNssaiErr = utils.String2Snssai(singleNssaiStr); singleNssaiErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: singleNssaiErr.Error(),
		}))
		return
	}

	dnn := ctx.Param("dnn")
	if len(dnn) == 0 {
		//dnn is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "dnn is required",
		}))
		return
	}
	mtcProviderInformation := ctx.Param("mtc-provider-information")
	if len(mtcProviderInformation) == 0 {
		//mtcProviderInformation is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "mtcProviderInformation is required",
		}))
		return
	}
	ifNoneMatch := ctx.Param("If-None-Match")
	ifModifiedSince := ctx.Param("If-Modified-Since")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.AuthorizationData

	successCode, result, apierr = prod.DR_HandleGetNiddAuData(ueId, *singleNssai, dnn, mtcProviderInformation, ifNoneMatch, ifModifiedSince)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for GetOdbData
func OnGetOdbData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32
	var result models.OdbData

	successCode, result, apierr = prod.DR_HandleGetOdbData(ueId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for GetIndividualSharedData
func OnGetIndividualSharedData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	sharedDataId := ctx.Param("sharedDataId")
	if len(sharedDataId) == 0 {
		//sharedDataId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "sharedDataId is required",
		}))
		return
	}
	ifNoneMatch := ctx.Param("If-None-Match")
	ifModifiedSince := ctx.Param("If-Modified-Since")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.SharedData

	successCode, result, apierr = prod.DR_HandleGetIndividualSharedData(sharedDataId, ifNoneMatch, ifModifiedSince)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for GetSharedData
func OnGetSharedData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	sharedDataIdsStr := ctx.Param("shared-data-ids")
	if len(sharedDataIdsStr) == 0 {
		//sharedDataIds is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "sharedDataIds is required",
		}))
		return
	}
	var sharedDataIds []string
	var sharedDataIdsErr error
	if sharedDataIds, sharedDataIdsErr = utils.String2ArrayOfstring(sharedDataIdsStr); sharedDataIdsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: sharedDataIdsErr.Error(),
		}))
		return
	}

	supportedFeatures := ctx.Param("supported-features")

	var apierr *sbi.ApiError
	var successCode int32
	var result []models.SharedData

	successCode, result, apierr = prod.DR_HandleGetSharedData(sharedDataIds, supportedFeatures)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for ModifysdmSubscription
func OnModifysdmSubscription(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	subsId := ctx.Param("subsId")
	if len(subsId) == 0 {
		//subsId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subsId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")

	var input []models.PatchItem

	var apierr *sbi.ApiError
	var successCode int32
	var result models.PatchResult

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleModifysdmSubscription(ueId, subsId, supportedFeatures, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for QuerysdmSubscription
func OnQuerysdmSubscription(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	subsId := ctx.Param("subsId")
	if len(subsId) == 0 {
		//subsId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subsId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32
	var result map[string]interface{}

	successCode, result, apierr = prod.DR_HandleQuerysdmSubscription(ueId, subsId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for RemovesdmSubscriptions
func OnRemovesdmSubscriptions(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	subsId := ctx.Param("subsId")
	if len(subsId) == 0 {
		//subsId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subsId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32

	successCode, apierr = prod.DR_HandleRemovesdmSubscriptions(ueId, subsId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for Updatesdmsubscriptions
func OnUpdatesdmsubscriptions(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	subsId := ctx.Param("subsId")
	if len(subsId) == 0 {
		//subsId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subsId is required",
		}))
		return
	}

	var input models.SdmSubscription

	var apierr *sbi.ApiError
	var successCode int32
	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, apierr = prod.DR_HandleUpdatesdmsubscriptions(ueId, subsId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for CreateSdmSubscriptions
func OnCreateSdmSubscriptions(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}

	var input models.SdmSubscription

	var apierr *sbi.ApiError
	var successCode int32
	var result models.SdmSubscription

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleCreateSdmSubscriptions(ueId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for Querysdmsubscriptions
func OnQuerysdmsubscriptions(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")

	var apierr *sbi.ApiError
	var successCode int32
	var result []models.SdmSubscription

	successCode, result, apierr = prod.DR_HandleQuerysdmsubscriptions(ueId, supportedFeatures)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for CreateSMFSubscriptions
func OnCreateSMFSubscriptions(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	subsId := ctx.Param("subsId")
	if len(subsId) == 0 {
		//subsId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subsId is required",
		}))
		return
	}

	var input models.SmfSubscriptionInfo

	var apierr *sbi.ApiError
	var successCode int32
	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, apierr = prod.DR_HandleCreateSMFSubscriptions(ueId, subsId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for GetSmfSubscriptionInfo
func OnGetSmfSubscriptionInfo(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	subsId := ctx.Param("subsId")
	if len(subsId) == 0 {
		//subsId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subsId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32
	var result models.SmfSubscriptionInfo

	successCode, result, apierr = prod.DR_HandleGetSmfSubscriptionInfo(ueId, subsId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for ModifySmfSubscriptionInfo
func OnModifySmfSubscriptionInfo(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	subsId := ctx.Param("subsId")
	if len(subsId) == 0 {
		//subsId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subsId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")

	var input []models.PatchItem

	var apierr *sbi.ApiError
	var successCode int32
	var result models.PatchResult

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleModifySmfSubscriptionInfo(ueId, subsId, supportedFeatures, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for RemoveSmfSubscriptionsInfo
func OnRemoveSmfSubscriptionsInfo(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	subsId := ctx.Param("subsId")
	if len(subsId) == 0 {
		//subsId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subsId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32

	successCode, apierr = prod.DR_HandleRemoveSmfSubscriptionsInfo(ueId, subsId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for CreateOrUpdateSmfRegistration
func OnCreateOrUpdateSmfRegistration(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	pduSessionIdStr := ctx.Param("pduSessionId")
	if len(pduSessionIdStr) == 0 {
		//pduSessionId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "pduSessionId is required",
		}))
		return
	}
	var pduSessionId *int32
	var pduSessionIdErr error
	if pduSessionId, pduSessionIdErr = utils.String2Int32(pduSessionIdStr); pduSessionIdErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: pduSessionIdErr.Error(),
		}))
		return
	}

	var input models.SmfRegistration

	var apierr *sbi.ApiError
	var successCode int32
	var result models.SmfRegistration

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleCreateOrUpdateSmfRegistration(ueId, *pduSessionId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for DeleteSmfRegistration
func OnDeleteSmfRegistration(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	pduSessionIdStr := ctx.Param("pduSessionId")
	if len(pduSessionIdStr) == 0 {
		//pduSessionId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "pduSessionId is required",
		}))
		return
	}
	var pduSessionId *int32
	var pduSessionIdErr error
	if pduSessionId, pduSessionIdErr = utils.String2Int32(pduSessionIdStr); pduSessionIdErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: pduSessionIdErr.Error(),
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32

	successCode, apierr = prod.DR_HandleDeleteSmfRegistration(ueId, *pduSessionId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for QuerySmfRegistration
func OnQuerySmfRegistration(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	pduSessionIdStr := ctx.Param("pduSessionId")
	if len(pduSessionIdStr) == 0 {
		//pduSessionId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "pduSessionId is required",
		}))
		return
	}
	var pduSessionId *int32
	var pduSessionIdErr error
	if pduSessionId, pduSessionIdErr = utils.String2Int32(pduSessionIdStr); pduSessionIdErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: pduSessionIdErr.Error(),
		}))
		return
	}

	fieldsStr := ctx.Param("fields")
	var fields []string
	var fieldsErr error
	if fields, fieldsErr = utils.String2ArrayOfstring(fieldsStr); fieldsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: fieldsErr.Error(),
		}))
		return
	}

	supportedFeatures := ctx.Param("supported-features")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.SmfRegistration

	successCode, result, apierr = prod.DR_HandleQuerySmfRegistration(ueId, *pduSessionId, fields, supportedFeatures)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for QuerySmfRegList
func OnQuerySmfRegList(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")

	var apierr *sbi.ApiError
	var successCode int32
	var result []models.SmfRegistration

	successCode, result, apierr = prod.DR_HandleQuerySmfRegList(ueId, supportedFeatures)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for QuerySmfSelectData
func OnQuerySmfSelectData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	servingPlmnId := ctx.Param("servingPlmnId")
	if len(servingPlmnId) == 0 {
		//servingPlmnId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "servingPlmnId is required",
		}))
		return
	}
	fieldsStr := ctx.Param("fields")
	var fields []string
	var fieldsErr error
	if fields, fieldsErr = utils.String2ArrayOfstring(fieldsStr); fieldsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: fieldsErr.Error(),
		}))
		return
	}

	supportedFeatures := ctx.Param("supported-features")
	ifNoneMatch := ctx.Param("If-None-Match")
	ifModifiedSince := ctx.Param("If-Modified-Since")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.SmfSelectionSubscriptionData

	successCode, result, apierr = prod.DR_HandleQuerySmfSelectData(ueId, servingPlmnId, fields, supportedFeatures, ifNoneMatch, ifModifiedSince)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for CreateSmsfContext3gpp
func OnCreateSmsfContext3gpp(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}

	var input models.SmsfRegistration

	var apierr *sbi.ApiError
	var successCode int32
	var result models.SmsfRegistration

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleCreateSmsfContext3gpp(ueId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for DeleteSmsfContext3gpp
func OnDeleteSmsfContext3gpp(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32

	successCode, apierr = prod.DR_HandleDeleteSmsfContext3gpp(ueId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for QuerySmsfContext3gpp
func OnQuerySmsfContext3gpp(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	fieldsStr := ctx.Param("fields")
	var fields []string
	var fieldsErr error
	if fields, fieldsErr = utils.String2ArrayOfstring(fieldsStr); fieldsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: fieldsErr.Error(),
		}))
		return
	}

	supportedFeatures := ctx.Param("supported-features")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.SmsfRegistration

	successCode, result, apierr = prod.DR_HandleQuerySmsfContext3gpp(ueId, fields, supportedFeatures)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for CreateSmsfContextNon3gpp
func OnCreateSmsfContextNon3gpp(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}

	var input models.SmsfRegistration

	var apierr *sbi.ApiError
	var successCode int32
	var result models.SmsfRegistration

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleCreateSmsfContextNon3gpp(ueId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for DeleteSmsfContextNon3gpp
func OnDeleteSmsfContextNon3gpp(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32

	successCode, apierr = prod.DR_HandleDeleteSmsfContextNon3gpp(ueId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for QuerySmsfContextNon3gpp
func OnQuerySmsfContextNon3gpp(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	fieldsStr := ctx.Param("fields")
	var fields []string
	var fieldsErr error
	if fields, fieldsErr = utils.String2ArrayOfstring(fieldsStr); fieldsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: fieldsErr.Error(),
		}))
		return
	}

	supportedFeatures := ctx.Param("supported-features")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.SmsfRegistration

	successCode, result, apierr = prod.DR_HandleQuerySmsfContextNon3gpp(ueId, fields, supportedFeatures)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for QuerySmsMngData
func OnQuerySmsMngData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	servingPlmnId := ctx.Param("servingPlmnId")
	if len(servingPlmnId) == 0 {
		//servingPlmnId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "servingPlmnId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")
	ifNoneMatch := ctx.Param("If-None-Match")
	ifModifiedSince := ctx.Param("If-Modified-Since")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.SmsManagementSubscriptionData

	successCode, result, apierr = prod.DR_HandleQuerySmsMngData(ueId, servingPlmnId, supportedFeatures, ifNoneMatch, ifModifiedSince)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for QuerySmsData
func OnQuerySmsData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	servingPlmnId := ctx.Param("servingPlmnId")
	if len(servingPlmnId) == 0 {
		//servingPlmnId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "servingPlmnId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")
	ifNoneMatch := ctx.Param("If-None-Match")
	ifModifiedSince := ctx.Param("If-Modified-Since")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.SmsSubscriptionData

	successCode, result, apierr = prod.DR_HandleQuerySmsData(ueId, servingPlmnId, supportedFeatures, ifNoneMatch, ifModifiedSince)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for ReadServiceParameterData
func OnReadServiceParameterData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	serviceParamIdsStr := ctx.Param("service-param-ids")
	var serviceParamIds []string
	var serviceParamIdsErr error
	if serviceParamIds, serviceParamIdsErr = utils.String2ArrayOfstring(serviceParamIdsStr); serviceParamIdsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: serviceParamIdsErr.Error(),
		}))
		return
	}

	dnnsStr := ctx.Param("dnns")
	var dnns []string
	var dnnsErr error
	if dnns, dnnsErr = utils.String2ArrayOfstring(dnnsStr); dnnsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: dnnsErr.Error(),
		}))
		return
	}

	snssaisStr := ctx.Param("snssais")
	var snssais []models.Snssai
	var snssaisErr error
	if snssais, snssaisErr = utils.String2ArrayOfSnssai(snssaisStr); snssaisErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: snssaisErr.Error(),
		}))
		return
	}

	internalGroupIdsStr := ctx.Param("internal-group-ids")
	var internalGroupIds []string
	var internalGroupIdsErr error
	if internalGroupIds, internalGroupIdsErr = utils.String2ArrayOfstring(internalGroupIdsStr); internalGroupIdsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: internalGroupIdsErr.Error(),
		}))
		return
	}

	supisStr := ctx.Param("supis")
	var supis []string
	var supisErr error
	if supis, supisErr = utils.String2ArrayOfstring(supisStr); supisErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: supisErr.Error(),
		}))
		return
	}

	ueIpv4sStr := ctx.Param("ue-ipv4s")
	var ueIpv4s []string
	var ueIpv4sErr error
	if ueIpv4s, ueIpv4sErr = utils.String2ArrayOfstring(ueIpv4sStr); ueIpv4sErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: ueIpv4sErr.Error(),
		}))
		return
	}

	ueIpv6sStr := ctx.Param("ue-ipv6s")
	var ueIpv6s []models.Ipv6Addr
	var ueIpv6sErr error
	if ueIpv6s, ueIpv6sErr = utils.String2ArrayOfIpv6Addr(ueIpv6sStr); ueIpv6sErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: ueIpv6sErr.Error(),
		}))
		return
	}

	ueMacsStr := ctx.Param("ue-macs")
	var ueMacs []string
	var ueMacsErr error
	if ueMacs, ueMacsErr = utils.String2ArrayOfstring(ueMacsStr); ueMacsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: ueMacsErr.Error(),
		}))
		return
	}

	suppFeat := ctx.Param("supp-feat")

	var apierr *sbi.ApiError
	var successCode int32
	var result []models.ServiceParameterData

	successCode, result, apierr = prod.DR_HandleReadServiceParameterData(serviceParamIds, dnns, snssais, internalGroupIds, supis, ueIpv4s, ueIpv6s, ueMacs, suppFeat)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for ReadSessionManagementPolicyData
func OnReadSessionManagementPolicyData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	snssaiStr := ctx.Param("snssai")
	var snssai *models.Snssai
	var snssaiErr error
	if snssai, snssaiErr = utils.String2Snssai(snssaiStr); snssaiErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: snssaiErr.Error(),
		}))
		return
	}

	dnn := ctx.Param("dnn")
	fieldsStr := ctx.Param("fields")
	var fields []string
	var fieldsErr error
	if fields, fieldsErr = utils.String2ArrayOfstring(fieldsStr); fieldsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: fieldsErr.Error(),
		}))
		return
	}

	suppFeat := ctx.Param("supp-feat")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.SmPolicyData

	successCode, result, apierr = prod.DR_HandleReadSessionManagementPolicyData(ueId, snssai, dnn, fields, suppFeat)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for UpdateSessionManagementPolicyData
func OnUpdateSessionManagementPolicyData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}

	var input models.SmPolicyDataPatch

	var apierr *sbi.ApiError
	var successCode int32
	var result models.SmPolicyData

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleUpdateSessionManagementPolicyData(ueId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for QuerySmData
func OnQuerySmData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	servingPlmnId := ctx.Param("servingPlmnId")
	if len(servingPlmnId) == 0 {
		//servingPlmnId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "servingPlmnId is required",
		}))
		return
	}
	singleNssaiStr := ctx.Param("single-nssai")
	var singleNssai *models.Snssai
	var singleNssaiErr error
	if singleNssai, singleNssaiErr = utils.String2Snssai(singleNssaiStr); singleNssaiErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: singleNssaiErr.Error(),
		}))
		return
	}

	dnn := ctx.Param("dnn")
	fieldsStr := ctx.Param("fields")
	var fields []string
	var fieldsErr error
	if fields, fieldsErr = utils.String2ArrayOfstring(fieldsStr); fieldsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: fieldsErr.Error(),
		}))
		return
	}

	supportedFeatures := ctx.Param("supported-features")
	ifNoneMatch := ctx.Param("If-None-Match")
	ifModifiedSince := ctx.Param("If-Modified-Since")

	var apierr *sbi.ApiError
	var successCode int32
	var result []models.SessionManagementSubscriptionData

	successCode, result, apierr = prod.DR_HandleQuerySmData(ueId, servingPlmnId, singleNssai, dnn, fields, supportedFeatures, ifNoneMatch, ifModifiedSince)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for ReadSponsorConnectivityData
func OnReadSponsorConnectivityData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	sponsorId := ctx.Param("sponsorId")
	if len(sponsorId) == 0 {
		//sponsorId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "sponsorId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32
	var result models.SponsorConnectivityData

	successCode, result, apierr = prod.DR_HandleReadSponsorConnectivityData(sponsorId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for QuerySubsToNotify
func OnQuerySubsToNotify(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ue-id")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")

	var apierr *sbi.ApiError
	var successCode int32
	var result []models.SubscriptionDataSubscriptions

	successCode, result, apierr = prod.DR_HandleQuerySubsToNotify(ueId, supportedFeatures)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for RemoveMultipleSubscriptionDataSubscriptions
func OnRemoveMultipleSubscriptionDataSubscriptions(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ue-id")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	nfInstanceId := ctx.Param("nf-instance-id")
	deleteAllNfsStr := ctx.Param("delete-all-nfs")
	var deleteAllNfs *bool
	var deleteAllNfsErr error
	if deleteAllNfs, deleteAllNfsErr = utils.String2Bool(deleteAllNfsStr); deleteAllNfsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: deleteAllNfsErr.Error(),
		}))
		return
	}

	implicitUnsubscribeIndicationStr := ctx.Param("implicit-unsubscribe-indication")
	var implicitUnsubscribeIndication *bool
	var implicitUnsubscribeIndicationErr error
	if implicitUnsubscribeIndication, implicitUnsubscribeIndicationErr = utils.String2Bool(implicitUnsubscribeIndicationStr); implicitUnsubscribeIndicationErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: implicitUnsubscribeIndicationErr.Error(),
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32

	successCode, apierr = prod.DR_HandleRemoveMultipleSubscriptionDataSubscriptions(ueId, nfInstanceId, deleteAllNfs, implicitUnsubscribeIndication)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for SubscriptionDataSubscriptions
func OnSubscriptionDataSubscriptions(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	var input models.SubscriptionDataSubscriptions

	var apierr *sbi.ApiError
	var successCode int32
	var result models.SubscriptionDataSubscriptions

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleSubscriptionDataSubscriptions(input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for ModifysubscriptionDataSubscription
func OnModifysubscriptionDataSubscription(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	subsId := ctx.Param("subsId")
	if len(subsId) == 0 {
		//subsId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subsId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")

	var input []models.PatchItem

	var apierr *sbi.ApiError
	var successCode int32
	var result models.PatchResult

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleModifysubscriptionDataSubscription(subsId, supportedFeatures, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for QuerySubscriptionDataSubscriptions
func OnQuerySubscriptionDataSubscriptions(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	subsId := ctx.Param("subsId")
	if len(subsId) == 0 {
		//subsId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subsId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32
	var result map[string]interface{}

	successCode, result, apierr = prod.DR_HandleQuerySubscriptionDataSubscriptions(subsId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for RemovesubscriptionDataSubscriptions
func OnRemovesubscriptionDataSubscriptions(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	subsId := ctx.Param("subsId")
	if len(subsId) == 0 {
		//subsId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subsId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32

	successCode, apierr = prod.DR_HandleRemovesubscriptionDataSubscriptions(subsId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for QueryTraceData
func OnQueryTraceData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	servingPlmnId := ctx.Param("servingPlmnId")
	if len(servingPlmnId) == 0 {
		//servingPlmnId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "servingPlmnId is required",
		}))
		return
	}
	ifNoneMatch := ctx.Param("If-None-Match")
	ifModifiedSince := ctx.Param("If-Modified-Since")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.TraceData

	successCode, result, apierr = prod.DR_HandleQueryTraceData(ueId, servingPlmnId, ifNoneMatch, ifModifiedSince)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for CreateOrReplaceUEPolicySet
func OnCreateOrReplaceUEPolicySet(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}

	var input models.UePolicySet

	var apierr *sbi.ApiError
	var successCode int32
	var result models.UePolicySet

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleCreateOrReplaceUEPolicySet(ueId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for ReadUEPolicySet
func OnReadUEPolicySet(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	suppFeat := ctx.Param("supp-feat")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.UePolicySet

	successCode, result, apierr = prod.DR_HandleReadUEPolicySet(ueId, suppFeat)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for UpdateUEPolicySet
func OnUpdateUEPolicySet(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}

	var input models.UePolicySetPatch

	var apierr *sbi.ApiError
	var successCode int32
	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, apierr = prod.DR_HandleUpdateUEPolicySet(ueId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for QueryUeLocation
func OnQueryUeLocation(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.LocationInfo

	successCode, result, apierr = prod.DR_HandleQueryUeLocation(ueId, supportedFeatures)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for CreateUsageMonitoringResource
func OnCreateUsageMonitoringResource(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	usageMonId := ctx.Param("usageMonId")
	if len(usageMonId) == 0 {
		//usageMonId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "usageMonId is required",
		}))
		return
	}

	var input models.UsageMonData

	var apierr *sbi.ApiError
	var successCode int32
	var result models.UsageMonData

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleCreateUsageMonitoringResource(ueId, usageMonId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for DeleteUsageMonitoringInformation
func OnDeleteUsageMonitoringInformation(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	usageMonId := ctx.Param("usageMonId")
	if len(usageMonId) == 0 {
		//usageMonId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "usageMonId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32

	successCode, apierr = prod.DR_HandleDeleteUsageMonitoringInformation(ueId, usageMonId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for ReadUsageMonitoringInformation
func OnReadUsageMonitoringInformation(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	usageMonId := ctx.Param("usageMonId")
	if len(usageMonId) == 0 {
		//usageMonId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "usageMonId is required",
		}))
		return
	}
	suppFeat := ctx.Param("supp-feat")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.UsageMonData

	successCode, result, apierr = prod.DR_HandleReadUsageMonitoringInformation(ueId, usageMonId, suppFeat)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for QueryV2xData
func OnQueryV2xData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")
	ifNoneMatch := ctx.Param("If-None-Match")
	ifModifiedSince := ctx.Param("If-Modified-Since")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.V2xSubscriptionData

	successCode, result, apierr = prod.DR_HandleQueryV2xData(ueId, supportedFeatures, ifNoneMatch, ifModifiedSince)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

type Producer interface {
	DR_HandleAmfContext3gpp(ueId string, supportedFeatures string, body []models.PatchItem) (successCode int32, result models.PatchResult, err *sbi.ApiError)
	DR_HandleCreateAmfContext3gpp(ueId string, body models.Amf3GppAccessRegistration) (successCode int32, result models.Amf3GppAccessRegistration, err *sbi.ApiError)
	DR_HandleQueryAmfContext3gpp(ueId string, fields []string, supportedFeatures string) (successCode int32, result models.Amf3GppAccessRegistration, err *sbi.ApiError)
	DR_HandleAmfContextNon3gpp(ueId string, supportedFeatures string, body []models.PatchItem) (successCode int32, result models.PatchResult, err *sbi.ApiError)
	DR_HandleCreateAmfContextNon3gpp(ueId string, body models.AmfNon3GppAccessRegistration) (successCode int32, result models.Amf3GppAccessRegistration, err *sbi.ApiError)
	DR_HandleQueryAmfContextNon3gpp(ueId string, fields []string, supportedFeatures string) (successCode int32, result models.AmfNon3GppAccessRegistration, err *sbi.ApiError)
	DR_HandleCreateAMFSubscriptions(ueId string, subsId string, body []models.AmfSubscriptionInfo) (successCode int32, err *sbi.ApiError)
	DR_HandleCreateOrReplaceAccessAndMobilityData(ueId string, body models.AccessAndMobilityData) (successCode int32, result models.AccessAndMobilityData, err *sbi.ApiError)
	DR_HandleDeleteAccessAndMobilityData(ueId string) (successCode int32, err *sbi.ApiError)
	DR_HandleQueryAccessAndMobilityData(ueId string, suppFeat string) (successCode int32, result models.AccessAndMobilityData, err *sbi.ApiError)
	DR_HandleUpdateAccessAndMobilityData(ueId string, body models.AccessAndMobilityData) (successCode int32, err *sbi.ApiError)
	DR_HandleReadAccessAndMobilityPolicyData(ueId string) (successCode int32, result models.AmPolicyData, err *sbi.ApiError)
	DR_HandleQueryAmData(ueId string, servingPlmnId string, fields []string, supportedFeatures string, ifNoneMatch string, ifModifiedSince string) (successCode int32, result models.AccessAndMobilitySubscriptionData, err *sbi.ApiError)
	DR_HandleModifyAmfSubscriptionInfo(ueId string, subsId string, supportedFeatures string, body []models.PatchItem) (successCode int32, result models.PatchResult, err *sbi.ApiError)
	DR_HandleCreateIndividualApplicationDataSubscription(body models.ApplicationDataSubs) (successCode int32, result models.ApplicationDataSubs, err *sbi.ApiError)
	DR_HandleReadApplicationDataChangeSubscriptions(dataFilter *models.DataFilter) (successCode int32, result []models.ApplicationDataSubs, err *sbi.ApiError)
	DR_HandleDeleteAuthenticationStatus(ueId string) (successCode int32, err *sbi.ApiError)
	DR_HandleQueryAuthenticationStatus(ueId string, fields []string, supportedFeatures string) (successCode int32, result models.AuthEvent, err *sbi.ApiError)
	DR_HandleQueryAuthSubsData(ueId string, supportedFeatures string) (successCode int32, result models.AuthenticationSubscription, err *sbi.ApiError)
	DR_HandleCreateAuthenticationSoR(ueId string, supportedFeatures string, body models.SorData) (successCode int32, err *sbi.ApiError)
	DR_HandleQueryAuthSoR(ueId string, supportedFeatures string) (successCode int32, result models.SorData, err *sbi.ApiError)
	DR_HandleCreateAuthenticationStatus(ueId string, body models.AuthEvent) (successCode int32, err *sbi.ApiError)
	DR_HandleModifyAuthenticationSubscription(ueId string, supportedFeatures string, body []models.PatchItem) (successCode int32, result models.PatchResult, err *sbi.ApiError)
	DR_HandleCreateAuthenticationUPU(ueId string, supportedFeatures string, body *models.UpuData) (successCode int32, err *sbi.ApiError)
	DR_HandleQueryAuthUPU(ueId string, supportedFeatures string) (successCode int32, result models.UpuData, err *sbi.ApiError)
	DR_HandleReadBdtData(bdtRefIds []string, suppFeat string) (successCode int32, result []models.BdtData, err *sbi.ApiError)
	DR_HandleReadBdtPolicyData(bdtPolicyIds []string, internalGroupIds []string, supis []string) (successCode int32, result []models.BdtPolicyData, err *sbi.ApiError)
	DR_HandleQueryCagAck(ueId string, supportedFeatures string) (successCode int32, result models.CagAckData, err *sbi.ApiError)
	DR_HandleCreateCagUpdateAck(ueId string, supportedFeatures string, body models.CagAckData) (successCode int32, err *sbi.ApiError)
	DR_HandleQuery5GVnGroupInternal(internalGroupIds []string) (successCode int32, result map[string]models.Model5GVnGroupConfiguration, err *sbi.ApiError)
	DR_HandleQuery5GVnGroup(gpsis []string) (successCode int32, result map[string]models.Model5GVnGroupConfiguration, err *sbi.ApiError)
	DR_HandleCreate5GVnGroup(externalGroupId string, body models.Model5GVnGroupConfiguration) (successCode int32, result models.Model5GVnGroupConfiguration, err *sbi.ApiError)
	DR_HandleQueryContextData(ueId string, contextDatasetNames []models.ContextDataSetName) (successCode int32, result models.ContextDataSets, err *sbi.ApiError)
	DR_HandleDelete5GVnGroup(externalGroupId string) (successCode int32, err *sbi.ApiError)
	DR_HandleQueryCoverageRestrictionData(ueId string, supportedFeatures string, ifNoneMatch string, ifModifiedSince string) (successCode int32, result models.EnhancedCoverageRestrictionData, err *sbi.ApiError)
	DR_HandleRemoveAmfSubscriptionsInfo(ueId string, subsId string) (successCode int32, err *sbi.ApiError)
	DR_HandleQueryEEData(ueId string, fields []string, supportedFeatures string) (successCode int32, result models.EeProfileData, err *sbi.ApiError)
	DR_HandleQueryGroupEEData(ueGroupId string, supportedFeatures string) (successCode int32, result models.EeGroupProfileData, err *sbi.ApiError)
	DR_HandleModifyEeGroupSubscription(ueGroupId string, subsId string, supportedFeatures string, body []models.PatchItem) (successCode int32, result models.PatchResult, err *sbi.ApiError)
	DR_HandleQueryEeGroupSubscription(ueGroupId string, subsId string) (successCode int32, result map[string]interface{}, err *sbi.ApiError)
	DR_HandleRemoveEeGroupSubscriptions(ueGroupId string, subsId string) (successCode int32, err *sbi.ApiError)
	DR_HandleUpdateEeGroupSubscriptions(ueGroupId string, subsId string, body models.EeSubscription) (successCode int32, err *sbi.ApiError)
	DR_HandleCreateEeGroupSubscriptions(ueGroupId string, body models.EeSubscription) (successCode int32, result models.EeSubscription, err *sbi.ApiError)
	DR_HandleQueryEeGroupSubscriptions(ueGroupId string, supportedFeatures string) (successCode int32, result []models.EeSubscription, err *sbi.ApiError)
	DR_HandleModifyEesubscription(ueId string, subsId string, supportedFeatures string, body []models.PatchItem) (successCode int32, result models.PatchResult, err *sbi.ApiError)
	DR_HandleQueryeeSubscription(ueId string, subsId string) (successCode int32, result map[string]interface{}, err *sbi.ApiError)
	DR_HandleRemoveeeSubscriptions(ueId string, subsId string) (successCode int32, err *sbi.ApiError)
	DR_HandleUpdateEesubscriptions(ueId string, subsId string, body models.EeSubscription) (successCode int32, err *sbi.ApiError)
	DR_HandleCreateEeSubscriptions(ueId string, body models.EeSubscription) (successCode int32, result models.EeSubscription, err *sbi.ApiError)
	DR_HandleQueryeesubscriptions(ueId string, supportedFeatures string) (successCode int32, result []models.EeSubscription, err *sbi.ApiError)
	DR_HandleCreateIndividualExposureDataSubscription(body models.ExposureDataSubscription) (successCode int32, result models.ExposureDataSubscription, err *sbi.ApiError)
	DR_HandleGetGroupIdentifiers(extGroupId string, intGroupId string, ueIdInd *bool, supportedFeatures string) (successCode int32, result models.GroupIdentifiers, err *sbi.ApiError)
	DR_HandleCreateHSSSubscriptions(ueId string, subsId string, body models.HssSubscriptionInfo) (successCode int32, err *sbi.ApiError)
	DR_HandleGetHssSubscriptionInfo(ueId string, subsId string) (successCode int32, result models.SmfSubscriptionInfo, err *sbi.ApiError)
	DR_HandleModifyHssSubscriptionInfo(ueId string, subsId string, supportedFeatures string, body []models.PatchItem) (successCode int32, result models.PatchResult, err *sbi.ApiError)
	DR_HandleRemoveHssSubscriptionsInfo(ueId string, subsId string) (successCode int32, err *sbi.ApiError)
	DR_HandleCreateHSSSDMSubscriptions(ueId string, subsId string, body models.HssSubscriptionInfo) (successCode int32, err *sbi.ApiError)
	DR_HandleGetHssSDMSubscriptionInfo(ueId string, subsId string) (successCode int32, result models.SmfSubscriptionInfo, err *sbi.ApiError)
	DR_HandleModifyHssSDMSubscriptionInfo(ueId string, subsId string, supportedFeatures string, body []models.PatchItem) (successCode int32, result models.PatchResult, err *sbi.ApiError)
	DR_HandleRemoveHssSDMSubscriptionsInfo(ueId string, subsId string) (successCode int32, err *sbi.ApiError)
	DR_HandleCreateIpSmGwContext(ueId string, body models.IpSmGwRegistration) (successCode int32, err *sbi.ApiError)
	DR_HandleDeleteIpSmGwContext(ueId string) (successCode int32, err *sbi.ApiError)
	DR_HandleModifyIpSmGwContext(ueId string, body []models.PatchItem) (successCode int32, err *sbi.ApiError)
	DR_HandleQueryIpSmGwContext(ueId string, fields []string, supportedFeatures string) (successCode int32, result models.IpSmGwRegistration, err *sbi.ApiError)
	DR_HandleReadIPTVCongifurationData(configIds []string, dnns []string, snssais []models.Snssai, supis []string, interGroupIds []string) (successCode int32, result []models.IptvConfigData, err *sbi.ApiError)
	DR_HandleDeleteIndividualApplicationDataSubscription(subsId string) (successCode int32, err *sbi.ApiError)
	DR_HandleReadIndividualApplicationDataSubscription(subsId string) (successCode int32, result models.ApplicationDataSubs, err *sbi.ApiError)
	DR_HandleReplaceIndividualApplicationDataSubscription(subsId string, body models.ApplicationDataSubs) (successCode int32, result models.ApplicationDataSubs, err *sbi.ApiError)
	DR_HandleCreateIndividualAppliedBdtPolicyData(bdtPolicyId string, body models.BdtPolicyData) (successCode int32, result models.BdtPolicyData, err *sbi.ApiError)
	DR_HandleDeleteIndividualAppliedBdtPolicyData(bdtPolicyId string) (successCode int32, err *sbi.ApiError)
	DR_HandleUpdateIndividualAppliedBdtPolicyData(bdtPolicyId string, body models.BdtPolicyDataPatch) (successCode int32, result models.BdtPolicyData, err *sbi.ApiError)
	DR_HandleDeleteIndividualAuthenticationStatus(ueId string, servingNetworkName string) (successCode int32, err *sbi.ApiError)
	DR_HandleQueryIndividualAuthenticationStatus(ueId string, servingNetworkName string, fields []string, supportedFeatures string) (successCode int32, result models.AuthEvent, err *sbi.ApiError)
	DR_HandleCreateIndividualAuthenticationStatus(ueId string, servingNetworkName string, body models.AuthEvent) (successCode int32, err *sbi.ApiError)
	DR_HandleCreateIndividualBdtData(bdtReferenceId string, body models.BdtData) (successCode int32, result models.BdtData, err *sbi.ApiError)
	DR_HandleDeleteIndividualBdtData(bdtReferenceId string) (successCode int32, err *sbi.ApiError)
	DR_HandleReadIndividualBdtData(bdtReferenceId string, suppFeat string) (successCode int32, result models.BdtData, err *sbi.ApiError)
	DR_HandleUpdateIndividualBdtData(bdtReferenceId string, body models.BdtDataPatch) (successCode int32, result models.BdtData, err *sbi.ApiError)
	DR_HandleDeleteIndividualExposureDataSubscription(subId string) (successCode int32, err *sbi.ApiError)
	DR_HandleReplaceIndividualExposureDataSubscription(subId string, body models.ExposureDataSubscription) (successCode int32, result models.ExposureDataSubscription, err *sbi.ApiError)
	DR_HandlePartialReplaceIndividualIPTVConfigurationData(configurationId string, body models.IptvConfigDataPatch) (successCode int32, result models.IptvConfigData, err *sbi.ApiError)
	DR_HandleCreateOrReplaceIndividualIPTVConfigurationData(configurationId string, body models.IptvConfigData) (successCode int32, result models.IptvConfigData, err *sbi.ApiError)
	DR_HandleDeleteIndividualIPTVConfigurationData(configurationId string) (successCode int32, err *sbi.ApiError)
	DR_HandleCreateOrReplaceIndividualInfluenceData(influenceId string, body models.TrafficInfluData) (successCode int32, result models.TrafficInfluData, err *sbi.ApiError)
	DR_HandleDeleteIndividualInfluenceData(influenceId string) (successCode int32, err *sbi.ApiError)
	DR_HandleUpdateIndividualInfluenceData(influenceId string, body models.TrafficInfluDataPatch) (successCode int32, result models.TrafficInfluData, err *sbi.ApiError)
	DR_HandleDeleteIndividualInfluenceDataSubscription(subscriptionId string) (successCode int32, err *sbi.ApiError)
	DR_HandleReadIndividualInfluenceDataSubscription(subscriptionId string) (successCode int32, result models.TrafficInfluSub, err *sbi.ApiError)
	DR_HandleReplaceIndividualInfluenceDataSubscription(subscriptionId string, body models.TrafficInfluSub) (successCode int32, result models.TrafficInfluSub, err *sbi.ApiError)
	DR_HandleCreateOrReplaceIndividualPFDData(appId string, body models.PfdDataForAppExt) (successCode int32, result models.PfdDataForAppExt, err *sbi.ApiError)
	DR_HandleDeleteIndividualPFDData(appId string) (successCode int32, err *sbi.ApiError)
	DR_HandleReadIndividualPFDData(appId string) (successCode int32, result models.PfdDataForAppExt, err *sbi.ApiError)
	DR_HandleDeleteIndividualPolicyDataSubscription(subsId string) (successCode int32, err *sbi.ApiError)
	DR_HandleReplaceIndividualPolicyDataSubscription(subsId string, body models.PolicyDataSubscription) (successCode int32, result models.PolicyDataSubscription, err *sbi.ApiError)
	DR_HandleCreateOrReplaceServiceParameterData(serviceParamId string, body models.ServiceParameterData) (successCode int32, result models.ServiceParameterData, err *sbi.ApiError)
	DR_HandleDeleteIndividualServiceParameterData(serviceParamId string) (successCode int32, err *sbi.ApiError)
	DR_HandleUpdateIndividualServiceParameterData(serviceParamId string, body models.ServiceParameterDataPatch) (successCode int32, result models.ServiceParameterData, err *sbi.ApiError)
	DR_HandleReadInfluenceData(influenceIds []string, dnns []string, snssais []models.Snssai, internalGroupIds []string, supis []string, suppFeat string) (successCode int32, result []models.TrafficInfluData, err *sbi.ApiError)
	DR_HandleCreateIndividualInfluenceDataSubscription(body models.TrafficInfluSub) (successCode int32, result models.TrafficInfluSub, err *sbi.ApiError)
	DR_HandleReadInfluenceDataSubscriptions(dnn string, snssai *models.Snssai, internalGroupId string, supi string) (successCode int32, result []models.TrafficInfluSub, err *sbi.ApiError)
	DR_HandleQueryLcsBcaData(ueId string, servingPlmnId string, supportedFeatures string, ifNoneMatch string, ifModifiedSince string) (successCode int32, result models.LcsBroadcastAssistanceTypesData, err *sbi.ApiError)
	DR_HandleQueryLcsMoData(ueId string, fields []string, supportedFeatures string, ifNoneMatch string, ifModifiedSince string) (successCode int32, result models.LcsMoData, err *sbi.ApiError)
	DR_HandleQueryLcsPrivacyData(ueId string, fields []string, supportedFeatures string, ifNoneMatch string, ifModifiedSince string) (successCode int32, result models.LcsPrivacyData, err *sbi.ApiError)
	DR_HandleCreateMessageWaitingData(ueId string, body models.MessageWaitingData) (successCode int32, err *sbi.ApiError)
	DR_HandleDeleteMessageWaitingData(ueId string) (successCode int32, err *sbi.ApiError)
	DR_HandleModifyMessageWaitingData(ueId string, body []models.PatchItem) (successCode int32, err *sbi.ApiError)
	DR_HandleQueryMessageWaitingData(ueId string, fields []string, supportedFeatures string) (successCode int32, result models.MessageWaitingData, err *sbi.ApiError)
	DR_HandleModify5GVnGroup(externalGroupId string, supportedFeatures string, body []models.PatchItem) (successCode int32, result models.PatchResult, err *sbi.ApiError)
	DR_HandleQueryNssaiAck(ueId string, supportedFeatures string) (successCode int32, result models.NssaiAckData, err *sbi.ApiError)
	DR_HandleCreateOrUpdateNssaiAck(ueId string, supportedFeatures string, body models.NssaiAckData) (successCode int32, err *sbi.ApiError)
	DR_HandleModifyOperSpecData(ueId string, supportedFeatures string, body []models.PatchItem) (successCode int32, result models.PatchResult, err *sbi.ApiError)
	DR_HandleQueryOperSpecData(ueId string, fields []string, supportedFeatures string, ifNoneMatch string, ifModifiedSince string) (successCode int32, result map[string]models.OperatorSpecificDataContainer, err *sbi.ApiError)
	DR_HandleReadOperatorSpecificData(ueId string, fields []string, suppFeat string) (successCode int32, result map[string]models.OperatorSpecificDataContainer, err *sbi.ApiError)
	DR_HandleReplaceOperatorSpecificData(ueId string, body map[string]models.OperatorSpecificDataContainer) (successCode int32, result map[string]models.OperatorSpecificDataContainer, err *sbi.ApiError)
	DR_HandleUpdateOperatorSpecificData(ueId string, body []models.PatchItem) (successCode int32, result models.PatchResult, err *sbi.ApiError)
	DR_HandleReadPFDData(appId []string) (successCode int32, result []models.PfdDataForAppExt, err *sbi.ApiError)
	DR_HandleGetppData(ueId string, supportedFeatures string, ifNoneMatch string, ifModifiedSince string) (successCode int32, result models.PpData, err *sbi.ApiError)
	DR_HandleQueryPPData(ueId string, supportedFeatures string) (successCode int32, result models.PpProfileData, err *sbi.ApiError)
	DR_HandleQuery5GVNGroupPPData(extGroupIds []string, supportedFeatures string) (successCode int32, result models.Pp5gVnGroupProfileData, err *sbi.ApiError)
	DR_HandleCreateOrReplaceSessionManagementData(ueId string, pduSessionId int32, body models.PduSessionManagementData) (successCode int32, result models.AccessAndMobilityData, err *sbi.ApiError)
	DR_HandleDeleteSessionManagementData(ueId string, pduSessionId int32) (successCode int32, err *sbi.ApiError)
	DR_HandleQuerySessionManagementData(ueId string, pduSessionId int32, ipv4Addr string, ipv6Prefix string, dnn string, fields []string, suppFeat string) (successCode int32, result models.PduSessionManagementData, err *sbi.ApiError)
	DR_HandleReadPlmnUePolicySet(plmnId string) (successCode int32, result models.UePolicySet, err *sbi.ApiError)
	DR_HandleCreateIndividualPolicyDataSubscription(body models.PolicyDataSubscription) (successCode int32, result models.PolicyDataSubscription, err *sbi.ApiError)
	DR_HandleQueryProvisionedData(ueId string, servingPlmnId string, datasetNames []models.DataSetName) (successCode int32, result models.ProvisionedDataSets, err *sbi.ApiError)
	DR_HandleModifyPpData(ueId string, supportedFeatures string, body []models.PatchItem) (successCode int32, result models.PatchResult, err *sbi.ApiError)
	DR_HandleGet5GVnGroupConfiguration(externalGroupId string) (successCode int32, result models.Model5GVnGroupConfiguration, err *sbi.ApiError)
	DR_HandleGetAmfSubscriptionInfo(ueId string, subsId string) (successCode int32, result []models.AmfSubscriptionInfo, err *sbi.ApiError)
	DR_HandleGetIdentityData(ueId string, appPortId *models.AppPortId, ifNoneMatch string, ifModifiedSince string) (successCode int32, result models.IdentityData, err *sbi.ApiError)
	DR_HandleGetNiddAuData(ueId string, singleNssai models.Snssai, dnn string, mtcProviderInformation string, ifNoneMatch string, ifModifiedSince string) (successCode int32, result models.AuthorizationData, err *sbi.ApiError)
	DR_HandleGetOdbData(ueId string) (successCode int32, result models.OdbData, err *sbi.ApiError)
	DR_HandleGetIndividualSharedData(sharedDataId string, ifNoneMatch string, ifModifiedSince string) (successCode int32, result models.SharedData, err *sbi.ApiError)
	DR_HandleGetSharedData(sharedDataIds []string, supportedFeatures string) (successCode int32, result []models.SharedData, err *sbi.ApiError)
	DR_HandleModifysdmSubscription(ueId string, subsId string, supportedFeatures string, body []models.PatchItem) (successCode int32, result models.PatchResult, err *sbi.ApiError)
	DR_HandleQuerysdmSubscription(ueId string, subsId string) (successCode int32, result map[string]interface{}, err *sbi.ApiError)
	DR_HandleRemovesdmSubscriptions(ueId string, subsId string) (successCode int32, err *sbi.ApiError)
	DR_HandleUpdatesdmsubscriptions(ueId string, subsId string, body models.SdmSubscription) (successCode int32, err *sbi.ApiError)
	DR_HandleCreateSdmSubscriptions(ueId string, body models.SdmSubscription) (successCode int32, result models.SdmSubscription, err *sbi.ApiError)
	DR_HandleQuerysdmsubscriptions(ueId string, supportedFeatures string) (successCode int32, result []models.SdmSubscription, err *sbi.ApiError)
	DR_HandleCreateSMFSubscriptions(ueId string, subsId string, body models.SmfSubscriptionInfo) (successCode int32, err *sbi.ApiError)
	DR_HandleGetSmfSubscriptionInfo(ueId string, subsId string) (successCode int32, result models.SmfSubscriptionInfo, err *sbi.ApiError)
	DR_HandleModifySmfSubscriptionInfo(ueId string, subsId string, supportedFeatures string, body []models.PatchItem) (successCode int32, result models.PatchResult, err *sbi.ApiError)
	DR_HandleRemoveSmfSubscriptionsInfo(ueId string, subsId string) (successCode int32, err *sbi.ApiError)
	DR_HandleCreateOrUpdateSmfRegistration(ueId string, pduSessionId int32, body models.SmfRegistration) (successCode int32, result models.SmfRegistration, err *sbi.ApiError)
	DR_HandleDeleteSmfRegistration(ueId string, pduSessionId int32) (successCode int32, err *sbi.ApiError)
	DR_HandleQuerySmfRegistration(ueId string, pduSessionId int32, fields []string, supportedFeatures string) (successCode int32, result models.SmfRegistration, err *sbi.ApiError)
	DR_HandleQuerySmfRegList(ueId string, supportedFeatures string) (successCode int32, result []models.SmfRegistration, err *sbi.ApiError)
	DR_HandleQuerySmfSelectData(ueId string, servingPlmnId string, fields []string, supportedFeatures string, ifNoneMatch string, ifModifiedSince string) (successCode int32, result models.SmfSelectionSubscriptionData, err *sbi.ApiError)
	DR_HandleCreateSmsfContext3gpp(ueId string, body models.SmsfRegistration) (successCode int32, result models.SmsfRegistration, err *sbi.ApiError)
	DR_HandleDeleteSmsfContext3gpp(ueId string) (successCode int32, err *sbi.ApiError)
	DR_HandleQuerySmsfContext3gpp(ueId string, fields []string, supportedFeatures string) (successCode int32, result models.SmsfRegistration, err *sbi.ApiError)
	DR_HandleCreateSmsfContextNon3gpp(ueId string, body models.SmsfRegistration) (successCode int32, result models.SmsfRegistration, err *sbi.ApiError)
	DR_HandleDeleteSmsfContextNon3gpp(ueId string) (successCode int32, err *sbi.ApiError)
	DR_HandleQuerySmsfContextNon3gpp(ueId string, fields []string, supportedFeatures string) (successCode int32, result models.SmsfRegistration, err *sbi.ApiError)
	DR_HandleQuerySmsMngData(ueId string, servingPlmnId string, supportedFeatures string, ifNoneMatch string, ifModifiedSince string) (successCode int32, result models.SmsManagementSubscriptionData, err *sbi.ApiError)
	DR_HandleQuerySmsData(ueId string, servingPlmnId string, supportedFeatures string, ifNoneMatch string, ifModifiedSince string) (successCode int32, result models.SmsSubscriptionData, err *sbi.ApiError)
	DR_HandleReadServiceParameterData(serviceParamIds []string, dnns []string, snssais []models.Snssai, internalGroupIds []string, supis []string, ueIpv4s []string, ueIpv6s []models.Ipv6Addr, ueMacs []string, suppFeat string) (successCode int32, result []models.ServiceParameterData, err *sbi.ApiError)
	DR_HandleReadSessionManagementPolicyData(ueId string, snssai *models.Snssai, dnn string, fields []string, suppFeat string) (successCode int32, result models.SmPolicyData, err *sbi.ApiError)
	DR_HandleUpdateSessionManagementPolicyData(ueId string, body models.SmPolicyDataPatch) (successCode int32, result models.SmPolicyData, err *sbi.ApiError)
	DR_HandleQuerySmData(ueId string, servingPlmnId string, singleNssai *models.Snssai, dnn string, fields []string, supportedFeatures string, ifNoneMatch string, ifModifiedSince string) (successCode int32, result []models.SessionManagementSubscriptionData, err *sbi.ApiError)
	DR_HandleReadSponsorConnectivityData(sponsorId string) (successCode int32, result models.SponsorConnectivityData, err *sbi.ApiError)
	DR_HandleQuerySubsToNotify(ueId string, supportedFeatures string) (successCode int32, result []models.SubscriptionDataSubscriptions, err *sbi.ApiError)
	DR_HandleRemoveMultipleSubscriptionDataSubscriptions(ueId string, nfInstanceId string, deleteAllNfs *bool, implicitUnsubscribeIndication *bool) (successCode int32, err *sbi.ApiError)
	DR_HandleSubscriptionDataSubscriptions(body models.SubscriptionDataSubscriptions) (successCode int32, result models.SubscriptionDataSubscriptions, err *sbi.ApiError)
	DR_HandleModifysubscriptionDataSubscription(subsId string, supportedFeatures string, body []models.PatchItem) (successCode int32, result models.PatchResult, err *sbi.ApiError)
	DR_HandleQuerySubscriptionDataSubscriptions(subsId string) (successCode int32, result map[string]interface{}, err *sbi.ApiError)
	DR_HandleRemovesubscriptionDataSubscriptions(subsId string) (successCode int32, err *sbi.ApiError)
	DR_HandleQueryTraceData(ueId string, servingPlmnId string, ifNoneMatch string, ifModifiedSince string) (successCode int32, result models.TraceData, err *sbi.ApiError)
	DR_HandleCreateOrReplaceUEPolicySet(ueId string, body models.UePolicySet) (successCode int32, result models.UePolicySet, err *sbi.ApiError)
	DR_HandleReadUEPolicySet(ueId string, suppFeat string) (successCode int32, result models.UePolicySet, err *sbi.ApiError)
	DR_HandleUpdateUEPolicySet(ueId string, body models.UePolicySetPatch) (successCode int32, err *sbi.ApiError)
	DR_HandleQueryUeLocation(ueId string, supportedFeatures string) (successCode int32, result models.LocationInfo, err *sbi.ApiError)
	DR_HandleCreateUsageMonitoringResource(ueId string, usageMonId string, body models.UsageMonData) (successCode int32, result models.UsageMonData, err *sbi.ApiError)
	DR_HandleDeleteUsageMonitoringInformation(ueId string, usageMonId string) (successCode int32, err *sbi.ApiError)
	DR_HandleReadUsageMonitoringInformation(ueId string, usageMonId string, suppFeat string) (successCode int32, result models.UsageMonData, err *sbi.ApiError)
	DR_HandleQueryV2xData(ueId string, supportedFeatures string, ifNoneMatch string, ifModifiedSince string) (successCode int32, result models.V2xSubscriptionData, err *sbi.ApiError)
}
