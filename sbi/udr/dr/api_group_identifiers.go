/*
Nudr_DataRepository API OpenAPI file

Unified Data Repository Service. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 2.1.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// Templates and customized generator are developed by Quang Tung Thai (tqtung@etri.re.kr)

package dr

import (
	"etri5gc/sbi"
	"etri5gc/sbi/models"
	"etri5gc/sbi/utils"
	"fmt"
	"net/http"
)

/*
@param client sbi.ConsumerClient - for encoding request/encoding response and sending request to remote agent.
@param extGroupId External Group Identifier
@param intGroupId Internal Group Identifier
@param ueIdInd Indication whether UE identifiers are required or not
@param supportedFeatures Supported Features
@return *models.GroupIdentifiers,
*/
func GetGroupIdentifiers(client sbi.ConsumerClient, extGroupId string, intGroupId string, ueIdInd *bool, supportedFeatures string) (result models.GroupIdentifiers, err error) {

	//create a request
	req := sbi.DefaultRequest()
	req.Method = http.MethodGet

	req.Path = fmt.Sprintf("%s/subscription-data/group-data/group-identifiers", ServicePath)
	if len(extGroupId) > 0 {
		req.QueryParams.Add("ext-group-id", extGroupId)
	}
	if len(intGroupId) > 0 {
		req.QueryParams.Add("int-group-id", intGroupId)
	}
	ueIdIndStr := utils.Param2String(*ueIdInd)
	if len(ueIdIndStr) > 0 {
		req.QueryParams.Add("ue-id-ind", ueIdIndStr)
	}
	if len(supportedFeatures) > 0 {
		req.QueryParams.Add("supported-features", supportedFeatures)
	}
	req.HeaderParams["Accept"] = "application/json"
	//send the request
	var resp *sbi.Response
	if resp, err = client.Send(req); err != nil {
		return
	}

	//handle the response
	if resp.StatusCode >= 300 {
		if resp.Body != nil {
			if err = client.DecodeResponse(resp); err == nil {
				err = sbi.NewApiError(resp.StatusCode, resp.Status, resp.Body)
			}
			return
		} else {
			err = fmt.Errorf("%d is unknown to GetGroupIdentifiers", resp.StatusCode)
			return
		}
	}

	resp.Body = &result
	if err = client.DecodeResponse(resp); err == nil {
		err = sbi.NewApiError(resp.StatusCode, resp.Status, resp.Body)
	}
	return
}

//sbi producer handler for GetGroupIdentifiers
func OnGetGroupIdentifiers(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(GroupIdentifiersApiHandler)

	extGroupId := ctx.Param("ext-group-id")
	intGroupId := ctx.Param("int-group-id")
	ueIdIndStr := ctx.Param("ue-id-ind")
	var ueIdInd *bool
	var ueIdIndErr error
	if ueIdInd, ueIdIndErr = utils.String2Bool(ueIdIndStr); ueIdIndErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: ueIdIndErr.Error(),
		}))
		return
	}

	supportedFeatures := ctx.Param("supported-features")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.GroupIdentifiers

	successCode, result, apierr = prod.DR_HandleGetGroupIdentifiers(extGroupId, intGroupId, ueIdInd, supportedFeatures)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

type GroupIdentifiersApiHandler interface {
	DR_HandleGetGroupIdentifiers(extGroupId string, intGroupId string, ueIdInd *bool, supportedFeatures string) (successCode int32, result models.GroupIdentifiers, err *sbi.ApiError)
}
