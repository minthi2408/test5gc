/*
Nudr_DataRepository API OpenAPI file

Unified Data Repository Service. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 2.1.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// Templates and customized generator are developed by Quang Tung Thai (tqtung@etri.re.kr)

package dr

import (
	"etri5gc/sbi"
	"etri5gc/sbi/models"
	"etri5gc/sbi/utils"
	"fmt"
	"net/http"
)

/*
@param client sbi.ConsumerClient - for encoding request/encoding response and sending request to remote agent.
@param bdtPolicyIds Each element identifies a service.
@param internalGroupIds Each element identifies a group of users.
@param supis Each element identifies the user.
@return []models.BdtPolicyData,
*/
func ReadBdtPolicyData(client sbi.ConsumerClient, bdtPolicyIds []string, internalGroupIds []string, supis []string) (result []models.BdtPolicyData, err error) {

	//create a request
	req := sbi.DefaultRequest()
	req.Method = http.MethodGet

	req.Path = fmt.Sprintf("%s/application-data/bdtPolicyData", ServicePath)
	bdtPolicyIdsStr := utils.Param2String(bdtPolicyIds)
	if len(bdtPolicyIdsStr) > 0 {
		req.QueryParams.Add("bdt-policy-ids", bdtPolicyIdsStr)
	}
	internalGroupIdsStr := utils.Param2String(internalGroupIds)
	if len(internalGroupIdsStr) > 0 {
		req.QueryParams.Add("internal-group-ids", internalGroupIdsStr)
	}
	supisStr := utils.Param2String(supis)
	if len(supisStr) > 0 {
		req.QueryParams.Add("supis", supisStr)
	}
	req.HeaderParams["Accept"] = "application/json, application/problem+json"
	//send the request
	var resp *sbi.Response
	if resp, err = client.Send(req); err != nil {
		return
	}

	//handle the response
	if resp.StatusCode >= 300 {
		if resp.StatusCode == 400 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 401 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 403 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 404 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 414 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 429 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 500 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 503 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.Body != nil {
			if err = client.DecodeResponse(resp); err == nil {
				err = sbi.NewApiError(resp.StatusCode, resp.Status, resp.Body)
			}
			return
		} else {
			err = fmt.Errorf("%d is unknown to ReadBdtPolicyData", resp.StatusCode)
			return
		}
	}

	resp.Body = &result
	if err = client.DecodeResponse(resp); err == nil {
		err = sbi.NewApiError(resp.StatusCode, resp.Status, resp.Body)
	}
	return
}

//sbi producer handler for ReadBdtPolicyData
func OnReadBdtPolicyData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(BdtPolicyDataStoreApiHandler)

	bdtPolicyIdsStr := ctx.Param("bdt-policy-ids")
	var bdtPolicyIds []string
	var bdtPolicyIdsErr error
	if bdtPolicyIds, bdtPolicyIdsErr = utils.String2ArrayOfstring(bdtPolicyIdsStr); bdtPolicyIdsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: bdtPolicyIdsErr.Error(),
		}))
		return
	}

	internalGroupIdsStr := ctx.Param("internal-group-ids")
	var internalGroupIds []string
	var internalGroupIdsErr error
	if internalGroupIds, internalGroupIdsErr = utils.String2ArrayOfstring(internalGroupIdsStr); internalGroupIdsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: internalGroupIdsErr.Error(),
		}))
		return
	}

	supisStr := ctx.Param("supis")
	var supis []string
	var supisErr error
	if supis, supisErr = utils.String2ArrayOfstring(supisStr); supisErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: supisErr.Error(),
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32
	var result []models.BdtPolicyData

	successCode, result, apierr = prod.DR_HandleReadBdtPolicyData(bdtPolicyIds, internalGroupIds, supis)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

type BdtPolicyDataStoreApiHandler interface {
	DR_HandleReadBdtPolicyData(bdtPolicyIds []string, internalGroupIds []string, supis []string) (successCode int32, result []models.BdtPolicyData, err *sbi.ApiError)
}
