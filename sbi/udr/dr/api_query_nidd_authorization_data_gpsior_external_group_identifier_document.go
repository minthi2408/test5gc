/*
Nudr_DataRepository API OpenAPI file

Unified Data Repository Service. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 2.1.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// Templates and customized generator are developed by Quang Tung Thai (tqtung@etri.re.kr)

package dr

import (
	"fmt"
	"net/http"
	"net/url"
	"etri5gc/sbi"
	"etri5gc/sbi/models"
	"etri5gc/sbi/utils"
	"strings"
)


/*
@param client sbi.ConsumerClient - for encoding request/encoding response and sending request to remote agent.
@param ueId UE ID
@param singleNssai single NSSAI
@param dnn DNN
@param mtcProviderInformation MTC Provider Information
@param ifNoneMatch Validator for conditional requests, as described in RFC 7232, 3.2
@param ifModifiedSince Validator for conditional requests, as described in RFC 7232, 3.3
@return *models.AuthorizationData, 
*/
func GetNiddAuData(client sbi.ConsumerClient, ueId string, singleNssai models.Snssai, dnn string, mtcProviderInformation string, ifNoneMatch string, ifModifiedSince string) (result models.AuthorizationData, err error) {
	
	if len(ueId) == 0 {
		err = fmt.Errorf("ueId is required")
		return
	}	
	singleNssaiStr := utils.Param2String(singleNssai)
	if len(singleNssaiStr) == 0 {
		err = fmt.Errorf("singleNssai is required")
		return
	}	
	if len(dnn) == 0 {
		err = fmt.Errorf("dnn is required")
		return
	}	
	if len(mtcProviderInformation) == 0 {
		err = fmt.Errorf("mtcProviderInformation is required")
		return
	}		
	//create a request
	req := sbi.DefaultRequest()
	req.Method = http.MethodGet

	req.Path = fmt.Sprintf("%s/subscription-data/{ueId}/nidd-authorization-data", ServicePath)
	req.Path = strings.Replace(req.Path, "{"+"ueId"+"}", url.PathEscape(ueId), -1)
	req.QueryParams.Add("single-nssai", singleNssaiStr)

	req.QueryParams.Add("dnn", dnn)

	req.QueryParams.Add("mtc-provider-information", mtcProviderInformation)

	if len(ifNoneMatch) > 0 {
		req.HeaderParams["If-None-Match"] = ifNoneMatch
	}
	if len(ifModifiedSince) > 0 {
		req.HeaderParams["If-Modified-Since"] = ifModifiedSince
	}	
	req.HeaderParams["Accept"] = "application/json"
	//send the request
	var resp *sbi.Response
	if resp, err = client.Send(req); err != nil {
		return
	}

	//handle the response
	if resp.StatusCode >= 300 {
		if resp.Body != nil {
			if err = client.DecodeResponse(resp); err == nil {
				err = sbi.NewApiError(resp.StatusCode, resp.Status, resp.Body)	
			}
			return
		} else {
			err = fmt.Errorf("%d is unknown to GetNiddAuData", resp.StatusCode)
			return
		}
	}

	resp.Body = &result
	if err = client.DecodeResponse(resp); err == nil {
		err = sbi.NewApiError(resp.StatusCode, resp.Status, resp.Body)	
	}
	return 
}


//sbi producer handler for GetNiddAuData
func OnGetNiddAuData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(QueryNIDDAuthorizationDataGPSIOrExternalGroupIdentifierDocumentApiHandler)
	
	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title: "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	singleNssaiStr := ctx.Param("single-nssai")
	if len(singleNssaiStr) == 0 {
		//singleNssai is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title: "Bad request",
			Status: http.StatusBadRequest,
			Detail: "singleNssai is required",
		}))
		return
	}
	var singleNssai *models.Snssai
	var singleNssaiErr error
	if singleNssai, singleNssaiErr = utils.String2Snssai(singleNssaiStr); singleNssaiErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title: "Bad request",
			Status: http.StatusBadRequest,
			Detail: singleNssaiErr.Error(), 
		}))
		return
	}
	
	dnn := ctx.Param("dnn")
	if len(dnn) == 0 {
		//dnn is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title: "Bad request",
			Status: http.StatusBadRequest,
			Detail: "dnn is required",
		}))
		return
	}
	mtcProviderInformation := ctx.Param("mtc-provider-information")
	if len(mtcProviderInformation) == 0 {
		//mtcProviderInformation is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title: "Bad request",
			Status: http.StatusBadRequest,
			Detail: "mtcProviderInformation is required",
		}))
		return
	}
	ifNoneMatch := ctx.Param("If-None-Match")
	ifModifiedSince := ctx.Param("If-Modified-Since")

	

	var apierr *sbi.ApiError
	var successCode int32
	var result models.AuthorizationData


	successCode, result, apierr = prod.DR_HandleGetNiddAuData(ueId, *singleNssai, dnn, mtcProviderInformation, ifNoneMatch, ifModifiedSince)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}




type QueryNIDDAuthorizationDataGPSIOrExternalGroupIdentifierDocumentApiHandler interface {
	DR_HandleGetNiddAuData(ueId string, singleNssai models.Snssai, dnn string, mtcProviderInformation string, ifNoneMatch string, ifModifiedSince string) (successCode int32, result models.AuthorizationData, err *sbi.ApiError)
}
