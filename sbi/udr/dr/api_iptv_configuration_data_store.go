/*
Nudr_DataRepository API OpenAPI file

Unified Data Repository Service. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 2.1.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// Templates and customized generator are developed by Quang Tung Thai (tqtung@etri.re.kr)

package dr

import (
	"etri5gc/sbi"
	"etri5gc/sbi/models"
	"etri5gc/sbi/utils"
	"fmt"
	"net/http"
)

/*
@param client sbi.ConsumerClient - for encoding request/encoding response and sending request to remote agent.
@param configIds Each element identifies a configuration.
@param dnns Each element identifies a DNN.
@param snssais Each element identifies a slice.
@param supis Each element identifies the user.
@param interGroupIds Each element identifies a group of users.
@return []models.IptvConfigData,
*/
func ReadIPTVCongifurationData(client sbi.ConsumerClient, configIds []string, dnns []string, snssais []models.Snssai, supis []string, interGroupIds []string) (result []models.IptvConfigData, err error) {

	//create a request
	req := sbi.DefaultRequest()
	req.Method = http.MethodGet

	req.Path = fmt.Sprintf("%s/application-data/iptvConfigData", ServicePath)
	configIdsStr := utils.Param2String(configIds)
	if len(configIdsStr) > 0 {
		req.QueryParams.Add("config-ids", configIdsStr)
	}
	dnnsStr := utils.Param2String(dnns)
	if len(dnnsStr) > 0 {
		req.QueryParams.Add("dnns", dnnsStr)
	}
	snssaisStr := utils.Param2String(snssais)
	if len(snssaisStr) > 0 {
		req.QueryParams.Add("snssais", snssaisStr)
	}
	supisStr := utils.Param2String(supis)
	if len(supisStr) > 0 {
		req.QueryParams.Add("supis", supisStr)
	}
	interGroupIdsStr := utils.Param2String(interGroupIds)
	if len(interGroupIdsStr) > 0 {
		req.QueryParams.Add("inter-group-ids", interGroupIdsStr)
	}
	req.HeaderParams["Accept"] = "application/json, application/problem+json"
	//send the request
	var resp *sbi.Response
	if resp, err = client.Send(req); err != nil {
		return
	}

	//handle the response
	if resp.StatusCode >= 300 {
		if resp.StatusCode == 400 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 401 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 403 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 404 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 414 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 429 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 500 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 503 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.Body != nil {
			if err = client.DecodeResponse(resp); err == nil {
				err = sbi.NewApiError(resp.StatusCode, resp.Status, resp.Body)
			}
			return
		} else {
			err = fmt.Errorf("%d is unknown to ReadIPTVCongifurationData", resp.StatusCode)
			return
		}
	}

	resp.Body = &result
	if err = client.DecodeResponse(resp); err == nil {
		err = sbi.NewApiError(resp.StatusCode, resp.Status, resp.Body)
	}
	return
}

//sbi producer handler for ReadIPTVCongifurationData
func OnReadIPTVCongifurationData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(IPTVConfigurationDataStoreApiHandler)

	configIdsStr := ctx.Param("config-ids")
	var configIds []string
	var configIdsErr error
	if configIds, configIdsErr = utils.String2ArrayOfstring(configIdsStr); configIdsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: configIdsErr.Error(),
		}))
		return
	}

	dnnsStr := ctx.Param("dnns")
	var dnns []string
	var dnnsErr error
	if dnns, dnnsErr = utils.String2ArrayOfstring(dnnsStr); dnnsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: dnnsErr.Error(),
		}))
		return
	}

	snssaisStr := ctx.Param("snssais")
	var snssais []models.Snssai
	var snssaisErr error
	if snssais, snssaisErr = utils.String2ArrayOfSnssai(snssaisStr); snssaisErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: snssaisErr.Error(),
		}))
		return
	}

	supisStr := ctx.Param("supis")
	var supis []string
	var supisErr error
	if supis, supisErr = utils.String2ArrayOfstring(supisStr); supisErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: supisErr.Error(),
		}))
		return
	}

	interGroupIdsStr := ctx.Param("inter-group-ids")
	var interGroupIds []string
	var interGroupIdsErr error
	if interGroupIds, interGroupIdsErr = utils.String2ArrayOfstring(interGroupIdsStr); interGroupIdsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: interGroupIdsErr.Error(),
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32
	var result []models.IptvConfigData

	successCode, result, apierr = prod.DR_HandleReadIPTVCongifurationData(configIds, dnns, snssais, supis, interGroupIds)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

type IPTVConfigurationDataStoreApiHandler interface {
	DR_HandleReadIPTVCongifurationData(configIds []string, dnns []string, snssais []models.Snssai, supis []string, interGroupIds []string) (successCode int32, result []models.IptvConfigData, err *sbi.ApiError)
}
