/*
Nudr_DataRepository API OpenAPI file

Unified Data Repository Service. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 2.1.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// Templates and customized generator are developed by Quang Tung Thai (tqtung@etri.re.kr)

package dr

import (
	"fmt"
	"net/http"
	"etri5gc/sbi"
	"etri5gc/sbi/models"
)


/*
@param client sbi.ConsumerClient - for encoding request/encoding response and sending request to remote agent.
@return *models.TrafficInfluSub, 
*/
func CreateIndividualInfluenceDataSubscription(client sbi.ConsumerClient, body models.TrafficInfluSub) (result models.TrafficInfluSub, err error) {
	
	//create a request
	req := sbi.DefaultRequest()
	req.Method = http.MethodPost

	req.Path = fmt.Sprintf("%s/application-data/influenceData/subs-to-notify", ServicePath)
	req.Body = &body
	req.HeaderParams["Content-Type"] = "application/json"
	req.HeaderParams["Accept"] = "application/json, application/problem+json"
	//send the request
	var resp *sbi.Response
	if resp, err = client.Send(req); err != nil {
		return
	}

	//handle the response
	if resp.StatusCode >= 300 {
		if resp.StatusCode == 400 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 401 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 403 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 404 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 411 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 413 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 415 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 429 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 500 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 503 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.Body != nil {
			if err = client.DecodeResponse(resp); err == nil {
				err = sbi.NewApiError(resp.StatusCode, resp.Status, resp.Body)	
			}
			return
		} else {
			err = fmt.Errorf("%d is unknown to CreateIndividualInfluenceDataSubscription", resp.StatusCode)
			return
		}
	}

	resp.Body = &result
	if err = client.DecodeResponse(resp); err == nil {
		err = sbi.NewApiError(resp.StatusCode, resp.Status, resp.Body)	
	}
	return 
}


//sbi producer handler for CreateIndividualInfluenceDataSubscription
func OnCreateIndividualInfluenceDataSubscription(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(InfluenceDataSubscriptionsCollectionApiHandler)
	

	var input models.TrafficInfluSub

	var apierr *sbi.ApiError
	var successCode int32
	var result models.TrafficInfluSub

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleCreateIndividualInfluenceDataSubscription(input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}
	

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}




/*
@param client sbi.ConsumerClient - for encoding request/encoding response and sending request to remote agent.
@param dnn Identifies a DNN.
@param snssai Identifies a slice.
@param internalGroupId Identifies a group of users.
@param supi Identifies a user.
@return []TrafficInfluSub, 
*/
func ReadInfluenceDataSubscriptions(client sbi.ConsumerClient, dnn string, snssai *models.Snssai, internalGroupId string, supi string) (result []models.TrafficInfluSub, err error) {
				
	//create a request
	req := sbi.DefaultRequest()
	req.Method = http.MethodGet

	req.Path = fmt.Sprintf("%s/application-data/influenceData/subs-to-notify", ServicePath)
	if len(dnn) > 0 {
		req.QueryParams.Add("dnn", dnn)
	}
	snssaiStr := utils.Param2String(snssai)
	if len(snssaiStr) > 0 {
		req.QueryParams.Add("snssai", snssaiStr)
	}
	if len(internalGroupId) > 0 {
		req.QueryParams.Add("internal-Group-Id", internalGroupId)
	}
	if len(supi) > 0 {
		req.QueryParams.Add("supi", supi)
	}	
	req.HeaderParams["Accept"] = "application/json, application/problem+json"
	//send the request
	var resp *sbi.Response
	if resp, err = client.Send(req); err != nil {
		return
	}

	//handle the response
	if resp.StatusCode >= 300 {
		if resp.StatusCode == 400 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 401 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 403 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 404 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 414 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 429 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 500 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 503 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.Body != nil {
			if err = client.DecodeResponse(resp); err == nil {
				err = sbi.NewApiError(resp.StatusCode, resp.Status, resp.Body)	
			}
			return
		} else {
			err = fmt.Errorf("%d is unknown to ReadInfluenceDataSubscriptions", resp.StatusCode)
			return
		}
	}

	resp.Body = &result
	if err = client.DecodeResponse(resp); err == nil {
		err = sbi.NewApiError(resp.StatusCode, resp.Status, resp.Body)	
	}
	return 
}


//sbi producer handler for ReadInfluenceDataSubscriptions
func OnReadInfluenceDataSubscriptions(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(InfluenceDataSubscriptionsCollectionApiHandler)
	
	dnn := ctx.Param("dnn")
	snssaiStr := ctx.Param("snssai")
	var snssai *models.Snssai
	var snssaiErr error
	if snssai, snssaiErr = utils.String2Snssai(snssaiStr); snssaiErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title: "Bad request",
			Status: http.StatusBadRequest,
			Detail: snssaiErr.Error(), 
		}))
		return
	}
	
	internalGroupId := ctx.Param("internal-Group-Id")
	supi := ctx.Param("supi")

	

	var apierr *sbi.ApiError
	var successCode int32
	var result []TrafficInfluSub


	successCode, result, apierr = prod.DR_HandleReadInfluenceDataSubscriptions(dnn, snssai, internalGroupId, supi)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}




type InfluenceDataSubscriptionsCollectionApiHandler interface {
	DR_HandleCreateIndividualInfluenceDataSubscription(body models.TrafficInfluSub) (successCode int32, result models.TrafficInfluSub, err *sbi.ApiError)
	DR_HandleReadInfluenceDataSubscriptions(dnn string, snssai *models.Snssai, internalGroupId string, supi string) (successCode int32, result []models.TrafficInfluSub, err *sbi.ApiError)
}
