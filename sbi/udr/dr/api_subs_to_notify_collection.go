/*
Nudr_DataRepository API OpenAPI file

Unified Data Repository Service. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 2.1.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// Templates and customized generator are developed by Quang Tung Thai (tqtung@etri.re.kr)

package dr

import (
	"fmt"
	"net/http"
	"etri5gc/sbi"
	"etri5gc/sbi/models"
)


/*
@param client sbi.ConsumerClient - for encoding request/encoding response and sending request to remote agent.
@param ueId UE id
@param supportedFeatures Supported Features
@return []SubscriptionDataSubscriptions, 
*/
func QuerySubsToNotify(client sbi.ConsumerClient, ueId string, supportedFeatures string) (result []models.SubscriptionDataSubscriptions, err error) {
	
	if len(ueId) == 0 {
		err = fmt.Errorf("ueId is required")
		return
	}	
	//create a request
	req := sbi.DefaultRequest()
	req.Method = http.MethodGet

	req.Path = fmt.Sprintf("%s/subscription-data/subs-to-notify", ServicePath)
	req.QueryParams.Add("ue-id", ueId)

	if len(supportedFeatures) > 0 {
		req.QueryParams.Add("supported-features", supportedFeatures)
	}	
	req.HeaderParams["Accept"] = "application/json"
	//send the request
	var resp *sbi.Response
	if resp, err = client.Send(req); err != nil {
		return
	}

	//handle the response
	if resp.StatusCode >= 300 {
		if resp.Body != nil {
			if err = client.DecodeResponse(resp); err == nil {
				err = sbi.NewApiError(resp.StatusCode, resp.Status, resp.Body)	
			}
			return
		} else {
			err = fmt.Errorf("%d is unknown to QuerySubsToNotify", resp.StatusCode)
			return
		}
	}

	resp.Body = &result
	if err = client.DecodeResponse(resp); err == nil {
		err = sbi.NewApiError(resp.StatusCode, resp.Status, resp.Body)	
	}
	return 
}


//sbi producer handler for QuerySubsToNotify
func OnQuerySubsToNotify(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(SubsToNotifyCollectionApiHandler)
	
	ueId := ctx.Param("ue-id")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title: "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")

	

	var apierr *sbi.ApiError
	var successCode int32
	var result []SubscriptionDataSubscriptions


	successCode, result, apierr = prod.DR_HandleQuerySubsToNotify(ueId, supportedFeatures)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}




/*
@param client sbi.ConsumerClient - for encoding request/encoding response and sending request to remote agent.
@param ueId UE ID
@param nfInstanceId NF Instance ID
@param deleteAllNfs Flag to delete subscriptions from all NFs
@param implicitUnsubscribeIndication Implicit Unsubscribe Indication
@return 
*/
func RemoveMultipleSubscriptionDataSubscriptions(client sbi.ConsumerClient, ueId string, nfInstanceId string, deleteAllNfs *bool, implicitUnsubscribeIndication *bool) (err error) {
	
	if len(ueId) == 0 {
		err = fmt.Errorf("ueId is required")
		return
	}			
	//create a request
	req := sbi.DefaultRequest()
	req.Method = http.MethodDelete

	req.Path = fmt.Sprintf("%s/subscription-data/subs-to-notify", ServicePath)
	req.QueryParams.Add("ue-id", ueId)

	if len(nfInstanceId) > 0 {
		req.QueryParams.Add("nf-instance-id", nfInstanceId)
	}
	deleteAllNfsStr := utils.Param2String(*deleteAllNfs)
	if len(deleteAllNfsStr) > 0 {
		req.QueryParams.Add("delete-all-nfs", deleteAllNfsStr)
	}
	implicitUnsubscribeIndicationStr := utils.Param2String(*implicitUnsubscribeIndication)
	if len(implicitUnsubscribeIndicationStr) > 0 {
		req.QueryParams.Add("implicit-unsubscribe-indication", implicitUnsubscribeIndicationStr)
	}	
	
	//send the request
	var resp *sbi.Response
	if resp, err = client.Send(req); err != nil {
		return
	}

	//handle the response
	if resp.StatusCode >= 300 {
		if resp.Body != nil {
			if err = client.DecodeResponse(resp); err == nil {
				err = sbi.NewApiError(resp.StatusCode, resp.Status, resp.Body)	
			}
			return
		} else {
			err = fmt.Errorf("%d is unknown to RemoveMultipleSubscriptionDataSubscriptions", resp.StatusCode)
			return
		}
	}

	return 
}


//sbi producer handler for RemoveMultipleSubscriptionDataSubscriptions
func OnRemoveMultipleSubscriptionDataSubscriptions(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(SubsToNotifyCollectionApiHandler)
	
	ueId := ctx.Param("ue-id")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title: "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	nfInstanceId := ctx.Param("nf-instance-id")
	deleteAllNfsStr := ctx.Param("delete-all-nfs")
	var deleteAllNfs *bool
	var deleteAllNfsErr error
	if deleteAllNfs, deleteAllNfsErr = utils.String2(deleteAllNfsStr); deleteAllNfsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title: "Bad request",
			Status: http.StatusBadRequest,
			Detail: deleteAllNfsErr.Error(), 
		}))
		return
	}
	
	implicitUnsubscribeIndicationStr := ctx.Param("implicit-unsubscribe-indication")
	var implicitUnsubscribeIndication *bool
	var implicitUnsubscribeIndicationErr error
	if implicitUnsubscribeIndication, implicitUnsubscribeIndicationErr = utils.String2(implicitUnsubscribeIndicationStr); implicitUnsubscribeIndicationErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title: "Bad request",
			Status: http.StatusBadRequest,
			Detail: implicitUnsubscribeIndicationErr.Error(), 
		}))
		return
	}
	

	

	var apierr *sbi.ApiError
	var successCode int32

	successCode, apierr = prod.DR_HandleRemoveMultipleSubscriptionDataSubscriptions(ueId, nfInstanceId, deleteAllNfs, implicitUnsubscribeIndication)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}




/*
@param client sbi.ConsumerClient - for encoding request/encoding response and sending request to remote agent.
@return *models.SubscriptionDataSubscriptions, 
*/
func SubscriptionDataSubscriptions(client sbi.ConsumerClient, body models.SubscriptionDataSubscriptions) (result models.SubscriptionDataSubscriptions, err error) {
	
	//create a request
	req := sbi.DefaultRequest()
	req.Method = http.MethodPost

	req.Path = fmt.Sprintf("%s/subscription-data/subs-to-notify", ServicePath)
	req.Body = &body
	req.HeaderParams["Content-Type"] = "application/json"
	req.HeaderParams["Accept"] = "application/json"
	//send the request
	var resp *sbi.Response
	if resp, err = client.Send(req); err != nil {
		return
	}

	//handle the response
	if resp.StatusCode >= 300 {
		if resp.Body != nil {
			if err = client.DecodeResponse(resp); err == nil {
				err = sbi.NewApiError(resp.StatusCode, resp.Status, resp.Body)	
			}
			return
		} else {
			err = fmt.Errorf("%d is unknown to SubscriptionDataSubscriptions", resp.StatusCode)
			return
		}
	}

	resp.Body = &result
	if err = client.DecodeResponse(resp); err == nil {
		err = sbi.NewApiError(resp.StatusCode, resp.Status, resp.Body)	
	}
	return 
}


//sbi producer handler for SubscriptionDataSubscriptions
func OnSubscriptionDataSubscriptions(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(SubsToNotifyCollectionApiHandler)
	

	var input models.SubscriptionDataSubscriptions

	var apierr *sbi.ApiError
	var successCode int32
	var result models.SubscriptionDataSubscriptions

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.DR_HandleSubscriptionDataSubscriptions(input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}
	

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}




type SubsToNotifyCollectionApiHandler interface {
	DR_HandleQuerySubsToNotify(ueId string, supportedFeatures string) (successCode int32, result []models.SubscriptionDataSubscriptions, err *sbi.ApiError)
	DR_HandleRemoveMultipleSubscriptionDataSubscriptions(ueId string, nfInstanceId string, deleteAllNfs *bool, implicitUnsubscribeIndication *bool) (successCode int32, err *sbi.ApiError)
	DR_HandleSubscriptionDataSubscriptions(body models.SubscriptionDataSubscriptions) (successCode int32, result models.SubscriptionDataSubscriptions, err *sbi.ApiError)
}
