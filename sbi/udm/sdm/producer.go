/*
Nudm_SDM

Nudm Subscriber Data Management Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 2.1.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// Templates and customized generator are developed by Quang Tung Thai (tqtung@etri.re.kr)

package sdm

import (
	"etri5gc/sbi"
	"etri5gc/sbi/models"
	"etri5gc/sbi/utils"
	"net/http"
)

//sbi producer handler for GetAmData
func OnGetAmData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	supi := ctx.Param("supi")
	if len(supi) == 0 {
		//supi is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "supi is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")
	plmnIdStr := ctx.Param("plmn-id")
	var plmnId *models.PlmnId
	var plmnIdErr error
	if plmnId, plmnIdErr = utils.String2PlmnId(plmnIdStr); plmnIdErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: plmnIdErr.Error(),
		}))
		return
	}

	ifNoneMatch := ctx.Param("If-None-Match")
	ifModifiedSince := ctx.Param("If-Modified-Since")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.AccessAndMobilitySubscriptionData

	successCode, result, apierr = prod.SDM_HandleGetAmData(supi, supportedFeatures, plmnId, ifNoneMatch, ifModifiedSince)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for GetEcrData
func OnGetEcrData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	supi := ctx.Param("supi")
	if len(supi) == 0 {
		//supi is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "supi is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")
	ifNoneMatch := ctx.Param("If-None-Match")
	ifModifiedSince := ctx.Param("If-Modified-Since")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.EnhancedCoverageRestrictionData

	successCode, result, apierr = prod.SDM_HandleGetEcrData(supi, supportedFeatures, ifNoneMatch, ifModifiedSince)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for GetSupiOrGpsi
func OnGetSupiOrGpsi(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")
	appPortIdStr := ctx.Param("app-port-id")
	var appPortId *models.AppPortId
	var appPortIdErr error
	if appPortId, appPortIdErr = utils.String2AppPortId(appPortIdStr); appPortIdErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: appPortIdErr.Error(),
		}))
		return
	}

	ifNoneMatch := ctx.Param("If-None-Match")
	ifModifiedSince := ctx.Param("If-Modified-Since")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.IdTranslationResult

	successCode, result, apierr = prod.SDM_HandleGetSupiOrGpsi(ueId, supportedFeatures, appPortId, ifNoneMatch, ifModifiedSince)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for GetGroupIdentifiers
func OnGetGroupIdentifiers(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	extGroupId := ctx.Param("ext-group-id")
	intGroupId := ctx.Param("int-group-id")
	ueIdIndStr := ctx.Param("ue-id-ind")
	var ueIdInd *bool
	var ueIdIndErr error
	if ueIdInd, ueIdIndErr = utils.String2Bool(ueIdIndStr); ueIdIndErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: ueIdIndErr.Error(),
		}))
		return
	}

	supportedFeatures := ctx.Param("supported-features")
	ifNoneMatch := ctx.Param("If-None-Match")
	ifModifiedSince := ctx.Param("If-Modified-Since")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.GroupIdentifiers

	successCode, result, apierr = prod.SDM_HandleGetGroupIdentifiers(extGroupId, intGroupId, ueIdInd, supportedFeatures, ifNoneMatch, ifModifiedSince)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for GetLcsBcaData
func OnGetLcsBcaData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	supi := ctx.Param("supi")
	if len(supi) == 0 {
		//supi is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "supi is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")
	plmnIdStr := ctx.Param("plmn-id")
	var plmnId *models.PlmnId
	var plmnIdErr error
	if plmnId, plmnIdErr = utils.String2PlmnId(plmnIdStr); plmnIdErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: plmnIdErr.Error(),
		}))
		return
	}

	ifNoneMatch := ctx.Param("If-None-Match")
	ifModifiedSince := ctx.Param("If-Modified-Since")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.LcsBroadcastAssistanceTypesData

	successCode, result, apierr = prod.SDM_HandleGetLcsBcaData(supi, supportedFeatures, plmnId, ifNoneMatch, ifModifiedSince)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for GetLcsMoData
func OnGetLcsMoData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	supi := ctx.Param("supi")
	if len(supi) == 0 {
		//supi is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "supi is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")
	ifNoneMatch := ctx.Param("If-None-Match")
	ifModifiedSince := ctx.Param("If-Modified-Since")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.LcsMoData

	successCode, result, apierr = prod.SDM_HandleGetLcsMoData(supi, supportedFeatures, ifNoneMatch, ifModifiedSince)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for GetLcsPrivacyData
func OnGetLcsPrivacyData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")
	ifNoneMatch := ctx.Param("If-None-Match")
	ifModifiedSince := ctx.Param("If-Modified-Since")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.LcsPrivacyData

	successCode, result, apierr = prod.SDM_HandleGetLcsPrivacyData(ueId, supportedFeatures, ifNoneMatch, ifModifiedSince)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for CAGAck
func OnCAGAck(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	supi := ctx.Param("supi")
	if len(supi) == 0 {
		//supi is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "supi is required",
		}))
		return
	}

	var input models.AcknowledgeInfo

	var apierr *sbi.ApiError
	var successCode int32
	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, apierr = prod.SDM_HandleCAGAck(supi, &input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for SNSSAIsAck
func OnSNSSAIsAck(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	supi := ctx.Param("supi")
	if len(supi) == 0 {
		//supi is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "supi is required",
		}))
		return
	}

	var input models.AcknowledgeInfo

	var apierr *sbi.ApiError
	var successCode int32
	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, apierr = prod.SDM_HandleSNSSAIsAck(supi, &input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for SorAckInfo
func OnSorAckInfo(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	supi := ctx.Param("supi")
	if len(supi) == 0 {
		//supi is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "supi is required",
		}))
		return
	}

	var input models.AcknowledgeInfo

	var apierr *sbi.ApiError
	var successCode int32
	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, apierr = prod.SDM_HandleSorAckInfo(supi, &input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for UpuAck
func OnUpuAck(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	supi := ctx.Param("supi")
	if len(supi) == 0 {
		//supi is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "supi is required",
		}))
		return
	}

	var input models.AcknowledgeInfo

	var apierr *sbi.ApiError
	var successCode int32
	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, apierr = prod.SDM_HandleUpuAck(supi, &input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for GetDataSets
func OnGetDataSets(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	supi := ctx.Param("supi")
	if len(supi) == 0 {
		//supi is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "supi is required",
		}))
		return
	}
	datasetNamesStr := ctx.Param("dataset-names")
	if len(datasetNamesStr) == 0 {
		//datasetNames is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "datasetNames is required",
		}))
		return
	}
	var datasetNames []models.DataSetName
	var datasetNamesErr error
	if datasetNames, datasetNamesErr = utils.String2ArrayOfDataSetName(datasetNamesStr); datasetNamesErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: datasetNamesErr.Error(),
		}))
		return
	}

	plmnIdStr := ctx.Param("plmn-id")
	var plmnId *models.PlmnId
	var plmnIdErr error
	if plmnId, plmnIdErr = utils.String2PlmnId(plmnIdStr); plmnIdErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: plmnIdErr.Error(),
		}))
		return
	}

	supportedFeatures := ctx.Param("supported-features")
	ifNoneMatch := ctx.Param("If-None-Match")
	ifModifiedSince := ctx.Param("If-Modified-Since")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.SubscriptionDataSets

	successCode, result, apierr = prod.SDM_HandleGetDataSets(supi, datasetNames, plmnId, supportedFeatures, ifNoneMatch, ifModifiedSince)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for GetSharedData
func OnGetSharedData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	sharedDataIdsStr := ctx.Param("shared-data-ids")
	if len(sharedDataIdsStr) == 0 {
		//sharedDataIds is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "sharedDataIds is required",
		}))
		return
	}
	var sharedDataIds []string
	var sharedDataIdsErr error
	if sharedDataIds, sharedDataIdsErr = utils.String2ArrayOfstring(sharedDataIdsStr); sharedDataIdsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: sharedDataIdsErr.Error(),
		}))
		return
	}

	supportedFeatures := ctx.Param("supportedFeatures")
	supportedFeatures2 := ctx.Param("supported-features")
	ifNoneMatch := ctx.Param("If-None-Match")
	ifModifiedSince := ctx.Param("If-Modified-Since")

	var apierr *sbi.ApiError
	var successCode int32
	var result []models.SharedData

	successCode, result, apierr = prod.SDM_HandleGetSharedData(sharedDataIds, supportedFeatures, supportedFeatures2, ifNoneMatch, ifModifiedSince)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for GetIndividualSharedData
func OnGetIndividualSharedData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	sharedDataIdStr := ctx.Param("sharedDataId")
	if len(sharedDataIdStr) == 0 {
		//sharedDataId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "sharedDataId is required",
		}))
		return
	}
	var sharedDataId []string
	var sharedDataIdErr error
	if sharedDataId, sharedDataIdErr = utils.String2ArrayOfstring(sharedDataIdStr); sharedDataIdErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: sharedDataIdErr.Error(),
		}))
		return
	}

	ifNoneMatch := ctx.Param("If-None-Match")
	ifModifiedSince := ctx.Param("If-Modified-Since")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.SharedData

	successCode, result, apierr = prod.SDM_HandleGetIndividualSharedData(sharedDataId, ifNoneMatch, ifModifiedSince)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for GetSmfSelData
func OnGetSmfSelData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	supi := ctx.Param("supi")
	if len(supi) == 0 {
		//supi is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "supi is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")
	plmnIdStr := ctx.Param("plmn-id")
	var plmnId *models.PlmnId
	var plmnIdErr error
	if plmnId, plmnIdErr = utils.String2PlmnId(plmnIdStr); plmnIdErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: plmnIdErr.Error(),
		}))
		return
	}

	ifNoneMatch := ctx.Param("If-None-Match")
	ifModifiedSince := ctx.Param("If-Modified-Since")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.SmfSelectionSubscriptionData

	successCode, result, apierr = prod.SDM_HandleGetSmfSelData(supi, supportedFeatures, plmnId, ifNoneMatch, ifModifiedSince)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for GetSmsMngtData
func OnGetSmsMngtData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	supi := ctx.Param("supi")
	if len(supi) == 0 {
		//supi is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "supi is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")
	plmnIdStr := ctx.Param("plmn-id")
	var plmnId *models.PlmnId
	var plmnIdErr error
	if plmnId, plmnIdErr = utils.String2PlmnId(plmnIdStr); plmnIdErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: plmnIdErr.Error(),
		}))
		return
	}

	ifNoneMatch := ctx.Param("If-None-Match")
	ifModifiedSince := ctx.Param("If-Modified-Since")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.SmsManagementSubscriptionData

	successCode, result, apierr = prod.SDM_HandleGetSmsMngtData(supi, supportedFeatures, plmnId, ifNoneMatch, ifModifiedSince)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for GetSmsData
func OnGetSmsData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	supi := ctx.Param("supi")
	if len(supi) == 0 {
		//supi is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "supi is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")
	plmnIdStr := ctx.Param("plmn-id")
	var plmnId *models.PlmnId
	var plmnIdErr error
	if plmnId, plmnIdErr = utils.String2PlmnId(plmnIdStr); plmnIdErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: plmnIdErr.Error(),
		}))
		return
	}

	ifNoneMatch := ctx.Param("If-None-Match")
	ifModifiedSince := ctx.Param("If-Modified-Since")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.SmsSubscriptionData

	successCode, result, apierr = prod.SDM_HandleGetSmsData(supi, supportedFeatures, plmnId, ifNoneMatch, ifModifiedSince)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for GetSmData
func OnGetSmData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	supi := ctx.Param("supi")
	if len(supi) == 0 {
		//supi is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "supi is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")
	singleNssaiStr := ctx.Param("single-nssai")
	var singleNssai *models.Snssai
	var singleNssaiErr error
	if singleNssai, singleNssaiErr = utils.String2Snssai(singleNssaiStr); singleNssaiErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: singleNssaiErr.Error(),
		}))
		return
	}

	dnn := ctx.Param("dnn")
	plmnIdStr := ctx.Param("plmn-id")
	var plmnId *models.PlmnId
	var plmnIdErr error
	if plmnId, plmnIdErr = utils.String2PlmnId(plmnIdStr); plmnIdErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: plmnIdErr.Error(),
		}))
		return
	}

	ifNoneMatch := ctx.Param("If-None-Match")
	ifModifiedSince := ctx.Param("If-Modified-Since")

	var apierr *sbi.ApiError
	var successCode int32
	var result []models.SessionManagementSubscriptionData

	successCode, result, apierr = prod.SDM_HandleGetSmData(supi, supportedFeatures, singleNssai, dnn, plmnId, ifNoneMatch, ifModifiedSince)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for GetNSSAI
func OnGetNSSAI(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	supi := ctx.Param("supi")
	if len(supi) == 0 {
		//supi is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "supi is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")
	plmnIdStr := ctx.Param("plmn-id")
	var plmnId *models.PlmnId
	var plmnIdErr error
	if plmnId, plmnIdErr = utils.String2PlmnId(plmnIdStr); plmnIdErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: plmnIdErr.Error(),
		}))
		return
	}

	ifNoneMatch := ctx.Param("If-None-Match")
	ifModifiedSince := ctx.Param("If-Modified-Since")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.Nssai

	successCode, result, apierr = prod.SDM_HandleGetNSSAI(supi, supportedFeatures, plmnId, ifNoneMatch, ifModifiedSince)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for Subscribe
func OnSubscribe(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}

	var input models.SdmSubscription

	var apierr *sbi.ApiError
	var successCode int32
	var result models.SdmSubscription

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.SDM_HandleSubscribe(ueId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for SubscribeToSharedData
func OnSubscribeToSharedData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	var input models.SdmSubscription

	var apierr *sbi.ApiError
	var successCode int32
	var result models.SdmSubscription

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.SDM_HandleSubscribeToSharedData(input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for Unsubscribe
func OnUnsubscribe(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	subscriptionId := ctx.Param("subscriptionId")
	if len(subscriptionId) == 0 {
		//subscriptionId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subscriptionId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32

	successCode, apierr = prod.SDM_HandleUnsubscribe(ueId, subscriptionId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for UnsubscribeForSharedData
func OnUnsubscribeForSharedData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	subscriptionId := ctx.Param("subscriptionId")
	if len(subscriptionId) == 0 {
		//subscriptionId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subscriptionId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32

	successCode, apierr = prod.SDM_HandleUnsubscribeForSharedData(subscriptionId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for Modify
func OnModify(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueId := ctx.Param("ueId")
	if len(ueId) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	subscriptionId := ctx.Param("subscriptionId")
	if len(subscriptionId) == 0 {
		//subscriptionId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subscriptionId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")

	var input models.SdmSubsModification

	var apierr *sbi.ApiError
	var successCode int32
	var result models.Modify200Response

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.SDM_HandleModify(ueId, subscriptionId, supportedFeatures, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for ModifySharedDataSubs
func OnModifySharedDataSubs(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	subscriptionId := ctx.Param("subscriptionId")
	if len(subscriptionId) == 0 {
		//subscriptionId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "subscriptionId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")

	var input models.SdmSubsModification

	var apierr *sbi.ApiError
	var successCode int32
	var result models.Modify200Response

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.SDM_HandleModifySharedDataSubs(subscriptionId, supportedFeatures, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for GetTraceConfigData
func OnGetTraceConfigData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	supi := ctx.Param("supi")
	if len(supi) == 0 {
		//supi is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "supi is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")
	plmnIdStr := ctx.Param("plmn-id")
	var plmnId *models.PlmnId
	var plmnIdErr error
	if plmnId, plmnIdErr = utils.String2PlmnId(plmnIdStr); plmnIdErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: plmnIdErr.Error(),
		}))
		return
	}

	ifNoneMatch := ctx.Param("If-None-Match")
	ifModifiedSince := ctx.Param("If-Modified-Since")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.TraceDataResponse

	successCode, result, apierr = prod.SDM_HandleGetTraceConfigData(supi, supportedFeatures, plmnId, ifNoneMatch, ifModifiedSince)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for UpdateSORInfo
func OnUpdateSORInfo(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	supi := ctx.Param("supi")
	if len(supi) == 0 {
		//supi is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "supi is required",
		}))
		return
	}

	var input models.SorUpdateInfo

	var apierr *sbi.ApiError
	var successCode int32
	var result models.SorInfo

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.SDM_HandleUpdateSORInfo(supi, &input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for GetUeCtxInAmfData
func OnGetUeCtxInAmfData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	supi := ctx.Param("supi")
	if len(supi) == 0 {
		//supi is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "supi is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.UeContextInAmfData

	successCode, result, apierr = prod.SDM_HandleGetUeCtxInAmfData(supi, supportedFeatures)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for GetUeCtxInSmfData
func OnGetUeCtxInSmfData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	supi := ctx.Param("supi")
	if len(supi) == 0 {
		//supi is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "supi is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.UeContextInSmfData

	successCode, result, apierr = prod.SDM_HandleGetUeCtxInSmfData(supi, supportedFeatures)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for GetUeCtxInSmsfData
func OnGetUeCtxInSmsfData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	supi := ctx.Param("supi")
	if len(supi) == 0 {
		//supi is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "supi is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.UeContextInSmsfData

	successCode, result, apierr = prod.SDM_HandleGetUeCtxInSmsfData(supi, supportedFeatures)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for GetV2xData
func OnGetV2xData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	supi := ctx.Param("supi")
	if len(supi) == 0 {
		//supi is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "supi is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")
	ifNoneMatch := ctx.Param("If-None-Match")
	ifModifiedSince := ctx.Param("If-Modified-Since")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.V2xSubscriptionData

	successCode, result, apierr = prod.SDM_HandleGetV2xData(supi, supportedFeatures, ifNoneMatch, ifModifiedSince)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

type Producer interface {
	SDM_HandleGetAmData(supi string, supportedFeatures string, plmnId *models.PlmnId, ifNoneMatch string, ifModifiedSince string) (successCode int32, result models.AccessAndMobilitySubscriptionData, err *sbi.ApiError)
	SDM_HandleGetEcrData(supi string, supportedFeatures string, ifNoneMatch string, ifModifiedSince string) (successCode int32, result models.EnhancedCoverageRestrictionData, err *sbi.ApiError)
	SDM_HandleGetSupiOrGpsi(ueId string, supportedFeatures string, appPortId *models.AppPortId, ifNoneMatch string, ifModifiedSince string) (successCode int32, result models.IdTranslationResult, err *sbi.ApiError)
	SDM_HandleGetGroupIdentifiers(extGroupId string, intGroupId string, ueIdInd *bool, supportedFeatures string, ifNoneMatch string, ifModifiedSince string) (successCode int32, result models.GroupIdentifiers, err *sbi.ApiError)
	SDM_HandleGetLcsBcaData(supi string, supportedFeatures string, plmnId *models.PlmnId, ifNoneMatch string, ifModifiedSince string) (successCode int32, result models.LcsBroadcastAssistanceTypesData, err *sbi.ApiError)
	SDM_HandleGetLcsMoData(supi string, supportedFeatures string, ifNoneMatch string, ifModifiedSince string) (successCode int32, result models.LcsMoData, err *sbi.ApiError)
	SDM_HandleGetLcsPrivacyData(ueId string, supportedFeatures string, ifNoneMatch string, ifModifiedSince string) (successCode int32, result models.LcsPrivacyData, err *sbi.ApiError)
	SDM_HandleCAGAck(supi string, body *models.AcknowledgeInfo) (successCode int32, err *sbi.ApiError)
	SDM_HandleSNSSAIsAck(supi string, body *models.AcknowledgeInfo) (successCode int32, err *sbi.ApiError)
	SDM_HandleSorAckInfo(supi string, body *models.AcknowledgeInfo) (successCode int32, err *sbi.ApiError)
	SDM_HandleUpuAck(supi string, body *models.AcknowledgeInfo) (successCode int32, err *sbi.ApiError)
	SDM_HandleGetDataSets(supi string, datasetNames []models.DataSetName, plmnId *models.PlmnId, supportedFeatures string, ifNoneMatch string, ifModifiedSince string) (successCode int32, result models.SubscriptionDataSets, err *sbi.ApiError)
	SDM_HandleGetSharedData(sharedDataIds []string, supportedFeatures string, supportedFeatures2 string, ifNoneMatch string, ifModifiedSince string) (successCode int32, result []models.SharedData, err *sbi.ApiError)
	SDM_HandleGetIndividualSharedData(sharedDataId []string, ifNoneMatch string, ifModifiedSince string) (successCode int32, result models.SharedData, err *sbi.ApiError)
	SDM_HandleGetSmfSelData(supi string, supportedFeatures string, plmnId *models.PlmnId, ifNoneMatch string, ifModifiedSince string) (successCode int32, result models.SmfSelectionSubscriptionData, err *sbi.ApiError)
	SDM_HandleGetSmsMngtData(supi string, supportedFeatures string, plmnId *models.PlmnId, ifNoneMatch string, ifModifiedSince string) (successCode int32, result models.SmsManagementSubscriptionData, err *sbi.ApiError)
	SDM_HandleGetSmsData(supi string, supportedFeatures string, plmnId *models.PlmnId, ifNoneMatch string, ifModifiedSince string) (successCode int32, result models.SmsSubscriptionData, err *sbi.ApiError)
	SDM_HandleGetSmData(supi string, supportedFeatures string, singleNssai *models.Snssai, dnn string, plmnId *models.PlmnId, ifNoneMatch string, ifModifiedSince string) (successCode int32, result []models.SessionManagementSubscriptionData, err *sbi.ApiError)
	SDM_HandleGetNSSAI(supi string, supportedFeatures string, plmnId *models.PlmnId, ifNoneMatch string, ifModifiedSince string) (successCode int32, result models.Nssai, err *sbi.ApiError)
	SDM_HandleSubscribe(ueId string, body models.SdmSubscription) (successCode int32, result models.SdmSubscription, err *sbi.ApiError)
	SDM_HandleSubscribeToSharedData(body models.SdmSubscription) (successCode int32, result models.SdmSubscription, err *sbi.ApiError)
	SDM_HandleUnsubscribe(ueId string, subscriptionId string) (successCode int32, err *sbi.ApiError)
	SDM_HandleUnsubscribeForSharedData(subscriptionId string) (successCode int32, err *sbi.ApiError)
	SDM_HandleModify(ueId string, subscriptionId string, supportedFeatures string, body models.SdmSubsModification) (successCode int32, result models.Modify200Response, err *sbi.ApiError)
	SDM_HandleModifySharedDataSubs(subscriptionId string, supportedFeatures string, body models.SdmSubsModification) (successCode int32, result models.Modify200Response, err *sbi.ApiError)
	SDM_HandleGetTraceConfigData(supi string, supportedFeatures string, plmnId *models.PlmnId, ifNoneMatch string, ifModifiedSince string) (successCode int32, result models.TraceDataResponse, err *sbi.ApiError)
	SDM_HandleUpdateSORInfo(supi string, body *models.SorUpdateInfo) (successCode int32, result models.SorInfo, err *sbi.ApiError)
	SDM_HandleGetUeCtxInAmfData(supi string, supportedFeatures string) (successCode int32, result models.UeContextInAmfData, err *sbi.ApiError)
	SDM_HandleGetUeCtxInSmfData(supi string, supportedFeatures string) (successCode int32, result models.UeContextInSmfData, err *sbi.ApiError)
	SDM_HandleGetUeCtxInSmsfData(supi string, supportedFeatures string) (successCode int32, result models.UeContextInSmsfData, err *sbi.ApiError)
	SDM_HandleGetV2xData(supi string, supportedFeatures string, ifNoneMatch string, ifModifiedSince string) (successCode int32, result models.V2xSubscriptionData, err *sbi.ApiError)
}
