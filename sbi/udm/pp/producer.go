/*
Nudm_PP

Nudm Parameter Provision Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// Templates and customized generator are developed by Quang Tung Thai (tqtung@etri.re.kr)

package pp

import (
	"etrib5gc/sbi"
	"etrib5gc/sbi/models"
	"etrib5gc/sbi/utils"
	"net/http"
)

//sbi producer handler for Create5GVNGroup
func OnCreate5GVNGroup(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	extGroupId := ctx.Param("extGroupId")
	if len(extGroupId) == 0 {
		//extGroupId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "extGroupId is required",
		}))
		return
	}

	var input models.Model5GVnGroupConfiguration

	var apierr *sbi.ApiError
	var successCode int32
	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, apierr = prod.PP_HandleCreate5GVNGroup(extGroupId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for Delete5GVNGroup
func OnDelete5GVNGroup(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	extGroupId := ctx.Param("extGroupId")
	if len(extGroupId) == 0 {
		//extGroupId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "extGroupId is required",
		}))
		return
	}
	mtcProviderInfo := ctx.Param("mtc-provider-info")
	afId := ctx.Param("af-id")

	var apierr *sbi.ApiError
	var successCode int32

	successCode, apierr = prod.PP_HandleDelete5GVNGroup(extGroupId, mtcProviderInfo, afId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for Get5GVNGroup
func OnGet5GVNGroup(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	extGroupId := ctx.Param("extGroupId")
	if len(extGroupId) == 0 {
		//extGroupId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "extGroupId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32
	var result models.Model5GVnGroupConfiguration

	successCode, result, apierr = prod.PP_HandleGet5GVNGroup(extGroupId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for Modify5GVNGroup
func OnModify5GVNGroup(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	extGroupId := ctx.Param("extGroupId")
	if len(extGroupId) == 0 {
		//extGroupId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "extGroupId is required",
		}))
		return
	}
	supportedFeatures := ctx.Param("supported-features")

	var input models.Model5GVnGroupConfiguration

	var apierr *sbi.ApiError
	var successCode int32
	var result models.PatchResult

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.PP_HandleModify5GVNGroup(extGroupId, supportedFeatures, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for Update
func OnUpdate(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	ueIdStr := ctx.Param("ueId")
	if len(ueIdStr) == 0 {
		//ueId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "ueId is required",
		}))
		return
	}
	var ueId *models.UpdateUeIdParameter
	var ueIdErr error
	if ueId, ueIdErr = utils.String2UpdateUeIdParameter(ueIdStr); ueIdErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: ueIdErr.Error(),
		}))
		return
	}

	supportedFeatures := ctx.Param("supported-features")

	var input models.PpData

	var apierr *sbi.ApiError
	var successCode int32
	var result models.PatchResult

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.PP_HandleUpdate(*ueId, supportedFeatures, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

type Producer interface {
	PP_HandleCreate5GVNGroup(extGroupId string, body models.Model5GVnGroupConfiguration) (successCode int32, err *sbi.ApiError)
	PP_HandleDelete5GVNGroup(extGroupId string, mtcProviderInfo string, afId string) (successCode int32, err *sbi.ApiError)
	PP_HandleGet5GVNGroup(extGroupId string) (successCode int32, result models.Model5GVnGroupConfiguration, err *sbi.ApiError)
	PP_HandleModify5GVNGroup(extGroupId string, supportedFeatures string, body models.Model5GVnGroupConfiguration) (successCode int32, result models.PatchResult, err *sbi.ApiError)
	PP_HandleUpdate(ueId models.UpdateUeIdParameter, supportedFeatures string, body models.PpData) (successCode int32, result models.PatchResult, err *sbi.ApiError)
}
