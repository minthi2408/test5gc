/*
Nudm_MT

UDM MT Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 1.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// Templates and customized generator are developed by Quang Tung Thai (tqtung@etri.re.kr)

package mt

import (
	"etrib5gc/sbi"
	"etrib5gc/sbi/models"
	"etrib5gc/sbi/utils"
	"net/http"
)

//sbi producer handler for ProvideLocationInfo
func OnProvideLocationInfo(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	supi := ctx.Param("supi")
	if len(supi) == 0 {
		//supi is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "supi is required",
		}))
		return
	}

	var input models.LocationInfoRequest

	var apierr *sbi.ApiError
	var successCode int32
	var result models.LocationInfoResult

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.MT_HandleProvideLocationInfo(supi, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for QueryUeInfo
func OnQueryUeInfo(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	supi := ctx.Param("supi")
	if len(supi) == 0 {
		//supi is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "supi is required",
		}))
		return
	}
	fieldsStr := ctx.Param("fields")
	if len(fieldsStr) == 0 {
		//fields is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "fields is required",
		}))
		return
	}
	var fields []string
	var fieldsErr error
	if fields, fieldsErr = utils.String2ArrayOfstring(fieldsStr); fieldsErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: fieldsErr.Error(),
		}))
		return
	}

	supportedFeatures := ctx.Param("supported-features")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.UeInfo

	successCode, result, apierr = prod.MT_HandleQueryUeInfo(supi, fields, supportedFeatures)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

type Producer interface {
	MT_HandleProvideLocationInfo(supi string, body models.LocationInfoRequest) (successCode int32, result models.LocationInfoResult, err *sbi.ApiError)
	MT_HandleQueryUeInfo(supi string, fields []string, supportedFeatures string) (successCode int32, result models.UeInfo, err *sbi.ApiError)
}
