/*
Nudm_UEAU

UDM UE Authentication Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// Templates and customized generator are developed by Quang Tung Thai (tqtung@etri.re.kr)

package ueau

import (
	"etri5gc/sbi"
	"etri5gc/sbi/models"
	"etri5gc/sbi/utils"
	"net/http"
)

//sbi producer handler for ConfirmAuth
func OnConfirmAuth(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	supi := ctx.Param("supi")
	if len(supi) == 0 {
		//supi is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "supi is required",
		}))
		return
	}

	var input models.AuthEvent

	var apierr *sbi.ApiError
	var successCode int32
	var result models.AuthEvent

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.UEAU_HandleConfirmAuth(supi, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for DeleteAuth
func OnDeleteAuth(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	supi := ctx.Param("supi")
	if len(supi) == 0 {
		//supi is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "supi is required",
		}))
		return
	}
	authEventId := ctx.Param("authEventId")
	if len(authEventId) == 0 {
		//authEventId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "authEventId is required",
		}))
		return
	}

	var input models.AuthEvent

	var apierr *sbi.ApiError
	var successCode int32
	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, apierr = prod.UEAU_HandleDeleteAuth(supi, authEventId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for GenerateAuthData
func OnGenerateAuthData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	supiOrSuci := ctx.Param("supiOrSuci")
	if len(supiOrSuci) == 0 {
		//supiOrSuci is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "supiOrSuci is required",
		}))
		return
	}

	var input models.AuthenticationInfoRequest

	var apierr *sbi.ApiError
	var successCode int32
	var result models.AuthenticationInfoResult

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.UEAU_HandleGenerateAuthData(supiOrSuci, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for GenerateAv
func OnGenerateAv(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	supi := ctx.Param("supi")
	if len(supi) == 0 {
		//supi is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "supi is required",
		}))
		return
	}
	hssAuthTypeStr := ctx.Param("hssAuthType")
	if len(hssAuthTypeStr) == 0 {
		//hssAuthType is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "hssAuthType is required",
		}))
		return
	}
	var hssAuthType *models.HssAuthTypeInUri
	var hssAuthTypeErr error
	if hssAuthType, hssAuthTypeErr = utils.String2HssAuthTypeInUri(hssAuthTypeStr); hssAuthTypeErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: hssAuthTypeErr.Error(),
		}))
		return
	}

	var input models.HssAuthenticationInfoRequest

	var apierr *sbi.ApiError
	var successCode int32
	var result models.HssAuthenticationInfoResult

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.UEAU_HandleGenerateAv(supi, *hssAuthType, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for GetRgAuthData
func OnGetRgAuthData(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	supiOrSuci := ctx.Param("supiOrSuci")
	if len(supiOrSuci) == 0 {
		//supiOrSuci is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "supiOrSuci is required",
		}))
		return
	}
	authenticatedIndStr := ctx.Param("authenticated-ind")
	if len(authenticatedIndStr) == 0 {
		//authenticatedInd is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "authenticatedInd is required",
		}))
		return
	}
	var authenticatedInd *bool
	var authenticatedIndErr error
	if authenticatedInd, authenticatedIndErr = utils.String2Bool(authenticatedIndStr); authenticatedIndErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: authenticatedIndErr.Error(),
		}))
		return
	}

	supportedFeatures := ctx.Param("supported-features")
	plmnIdStr := ctx.Param("plmn-id")
	var plmnId *models.PlmnId
	var plmnIdErr error
	if plmnId, plmnIdErr = utils.String2PlmnId(plmnIdStr); plmnIdErr != nil {
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: plmnIdErr.Error(),
		}))
		return
	}

	ifNoneMatch := ctx.Param("If-None-Match")
	ifModifiedSince := ctx.Param("If-Modified-Since")

	var apierr *sbi.ApiError
	var successCode int32
	var result models.RgAuthCtx

	successCode, result, apierr = prod.UEAU_HandleGetRgAuthData(supiOrSuci, *authenticatedInd, supportedFeatures, plmnId, ifNoneMatch, ifModifiedSince)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

type Producer interface {
	UEAU_HandleConfirmAuth(supi string, body models.AuthEvent) (successCode int32, result models.AuthEvent, err *sbi.ApiError)
	UEAU_HandleDeleteAuth(supi string, authEventId string, body models.AuthEvent) (successCode int32, err *sbi.ApiError)
	UEAU_HandleGenerateAuthData(supiOrSuci string, body models.AuthenticationInfoRequest) (successCode int32, result models.AuthenticationInfoResult, err *sbi.ApiError)
	UEAU_HandleGenerateAv(supi string, hssAuthType models.HssAuthTypeInUri, body models.HssAuthenticationInfoRequest) (successCode int32, result models.HssAuthenticationInfoResult, err *sbi.ApiError)
	UEAU_HandleGetRgAuthData(supiOrSuci string, authenticatedInd bool, supportedFeatures string, plmnId *models.PlmnId, ifNoneMatch string, ifModifiedSince string) (successCode int32, result models.RgAuthCtx, err *sbi.ApiError)
}
