/*
Nudm_NIDDAU

Nudm NIDD Authorization Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// Templates and customized generator are developed by Quang Tung Thai (tqtung@etri.re.kr)

package niddau

import (
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"etri5gc/sbi"
	"etri5gc/sbi/models"
)


const (
 SERVICE_PATH = "{apiRoot}/nudm-niddau/v1"
)



/*
@param client sbi.ConsumerClient - for encoding request/encoding response and sending request to remote agent.
@param ueIdentity Represents the scope of the UE for which the NIDD configuration are authorized. Contains the GPSI of the user or the external group ID.
@return *models.AuthorizationData, 
*/
func AuthorizeNiddData(client sbi.ConsumerClient, ueIdentity string, body models.AuthorizationInfo) (result models.AuthorizationData, err error) {
	
	if len(ueIdentity) == 0 {
		err = fmt.Errorf("ueIdentity is required")
		return
	}	
	//create a request
	req := sbi.DefaultRequest()
	req.Method = http.MethodPost

	req.Path = fmt.Sprintf("%s/{ueIdentity}/authorize", SERVICE_PATH)
	req.Path = strings.Replace(req.Path, "{"+"ueIdentity"+"}", url.PathEscape(ueIdentity), -1)
	req.Body = &body
	req.HeaderParams["Content-Type"] = "application/json"
	req.HeaderParams["Accept"] = "application/json, application/problem+json"
	//send the request
	var resp *sbi.Response
	if resp, err = client.Send(req); err != nil {
		return
	}

	//handle the response
	if resp.StatusCode >= 300 {
		if resp.StatusCode == 400 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 403 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 404 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 500 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 501 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.StatusCode == 503 {
			resp.Body = &models.ProblemDetails{}
		}
		if resp.Body != nil {
			if err = client.DecodeResponse(resp); err == nil {
				err = sbi.NewApiError(resp.StatusCode, resp.Status, resp.Body)	
			}
			return
		} else {
			err = fmt.Errorf("%d is unknown to AuthorizeNiddData", resp.StatusCode)
			return
		}
	}

	resp.Body = &result
	if err = client.DecodeResponse(resp); err == nil {
		err = sbi.NewApiError(resp.StatusCode, resp.Status, resp.Body)	
	}
	return 
}


