/*
Npcf_PolicyAuthorization Service API

PCF Policy Authorization Service. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 1.1.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// Templates and customized generator are developed by Quang Tung Thai (tqtung@etri.re.kr)

package pa

import (
	"etrib5gc/sbi"
	"etrib5gc/sbi/models"
	"net/http"
)

//sbi producer handler for PostAppSessions
func OnPostAppSessions(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	var input models.AppSessionContext

	var apierr *sbi.ApiError
	var successCode int32
	var result models.AppSessionContext

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.PA_HandlePostAppSessions(input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for DeleteEventsSubsc
func OnDeleteEventsSubsc(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	appSessionId := ctx.Param("appSessionId")
	if len(appSessionId) == 0 {
		//appSessionId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "appSessionId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32

	successCode, apierr = prod.PA_HandleDeleteEventsSubsc(appSessionId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for UpdateEventsSubsc
func OnUpdateEventsSubsc(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	appSessionId := ctx.Param("appSessionId")
	if len(appSessionId) == 0 {
		//appSessionId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "appSessionId is required",
		}))
		return
	}

	var input models.EventsSubscReqData

	var apierr *sbi.ApiError
	var successCode int32
	var result models.EventsSubscPutData

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.PA_HandleUpdateEventsSubsc(appSessionId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for DeleteAppSession
func OnDeleteAppSession(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	appSessionId := ctx.Param("appSessionId")
	if len(appSessionId) == 0 {
		//appSessionId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "appSessionId is required",
		}))
		return
	}

	var input models.EventsSubscReqData

	var apierr *sbi.ApiError
	var successCode int32
	var result models.AppSessionContext

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.PA_HandleDeleteAppSession(appSessionId, &input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for GetAppSession
func OnGetAppSession(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	appSessionId := ctx.Param("appSessionId")
	if len(appSessionId) == 0 {
		//appSessionId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "appSessionId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32
	var result models.AppSessionContext

	successCode, result, apierr = prod.PA_HandleGetAppSession(appSessionId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for ModAppSession
func OnModAppSession(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	appSessionId := ctx.Param("appSessionId")
	if len(appSessionId) == 0 {
		//appSessionId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "appSessionId is required",
		}))
		return
	}

	var input models.AppSessionContextUpdateDataPatch

	var apierr *sbi.ApiError
	var successCode int32
	var result models.AppSessionContext

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.PA_HandleModAppSession(appSessionId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for PcscfRestoration
func OnPcscfRestoration(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	var input models.PcscfRestorationRequestData

	var apierr *sbi.ApiError
	var successCode int32
	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, apierr = prod.PA_HandlePcscfRestoration(input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

type Producer interface {
	PA_HandlePostAppSessions(body models.AppSessionContext) (successCode int32, result models.AppSessionContext, err *sbi.ApiError)
	PA_HandleDeleteEventsSubsc(appSessionId string) (successCode int32, err *sbi.ApiError)
	PA_HandleUpdateEventsSubsc(appSessionId string, body models.EventsSubscReqData) (successCode int32, result models.EventsSubscPutData, err *sbi.ApiError)
	PA_HandleDeleteAppSession(appSessionId string, body *models.EventsSubscReqData) (successCode int32, result models.AppSessionContext, err *sbi.ApiError)
	PA_HandleGetAppSession(appSessionId string) (successCode int32, result models.AppSessionContext, err *sbi.ApiError)
	PA_HandleModAppSession(appSessionId string, body models.AppSessionContextUpdateDataPatch) (successCode int32, result models.AppSessionContext, err *sbi.ApiError)
	PA_HandlePcscfRestoration(body models.PcscfRestorationRequestData) (successCode int32, err *sbi.ApiError)
}
