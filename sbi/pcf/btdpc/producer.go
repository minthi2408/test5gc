/*
Npcf_BDTPolicyControl Service API

PCF BDT Policy Control Service. Â© 2021, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 1.1.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// Templates and customized generator are developed by Quang Tung Thai (tqtung@etri.re.kr)

package btdpc

import (
	"etri5gc/sbi"
	"etri5gc/sbi/models"
	"net/http"
)

//sbi producer handler for CreateBDTPolicy
func OnCreateBDTPolicy(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	var input models.BdtReqData

	var apierr *sbi.ApiError
	var successCode int32
	var result models.BdtPolicy

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.BTDPC_HandleCreateBDTPolicy(input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for GetBDTPolicy
func OnGetBDTPolicy(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	bdtPolicyId := ctx.Param("bdtPolicyId")
	if len(bdtPolicyId) == 0 {
		//bdtPolicyId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "bdtPolicyId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32
	var result models.BdtPolicy

	successCode, result, apierr = prod.BTDPC_HandleGetBDTPolicy(bdtPolicyId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for UpdateBDTPolicy
func OnUpdateBDTPolicy(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	bdtPolicyId := ctx.Param("bdtPolicyId")
	if len(bdtPolicyId) == 0 {
		//bdtPolicyId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "bdtPolicyId is required",
		}))
		return
	}

	var input models.PatchBdtPolicy

	var apierr *sbi.ApiError
	var successCode int32
	var result models.BdtPolicy

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.BTDPC_HandleUpdateBDTPolicy(bdtPolicyId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

type Producer interface {
	BTDPC_HandleCreateBDTPolicy(body models.BdtReqData) (successCode int32, result models.BdtPolicy, err *sbi.ApiError)
	BTDPC_HandleGetBDTPolicy(bdtPolicyId string) (successCode int32, result models.BdtPolicy, err *sbi.ApiError)
	BTDPC_HandleUpdateBDTPolicy(bdtPolicyId string, body models.PatchBdtPolicy) (successCode int32, result models.BdtPolicy, err *sbi.ApiError)
}
