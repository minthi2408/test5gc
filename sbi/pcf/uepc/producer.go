/*
Npcf_UEPolicyControl

UE Policy Control Service. Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved. 

API version: 1.1.6
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// Templates and customized generator are developed by Quang Tung Thai (tqtung@etri.re.kr)

package uepc

import (
	"net/http"
	"etri5gc/sbi"
	"etri5gc/sbi/models"
)

//sbi producer handler for DeleteIndividualUEPolicyAssociation
func OnDeleteIndividualUEPolicyAssociation(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)
	
	polAssoId := ctx.Param("polAssoId")
	if len(polAssoId) == 0 {
		//polAssoId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title: "Bad request",
			Status: http.StatusBadRequest,
			Detail: "polAssoId is required",
		}))
		return
	}

	

	var apierr *sbi.ApiError
	var successCode int32

	successCode, apierr = prod.UEPC_HandleDeleteIndividualUEPolicyAssociation(polAssoId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}


//sbi producer handler for ReadIndividualUEPolicyAssociation
func OnReadIndividualUEPolicyAssociation(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)
	
	polAssoId := ctx.Param("polAssoId")
	if len(polAssoId) == 0 {
		//polAssoId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title: "Bad request",
			Status: http.StatusBadRequest,
			Detail: "polAssoId is required",
		}))
		return
	}

	

	var apierr *sbi.ApiError
	var successCode int32
	var result models.PolicyAssociation


	successCode, result, apierr = prod.UEPC_HandleReadIndividualUEPolicyAssociation(polAssoId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}


//sbi producer handler for ReportObservedEventTriggersForIndividualUEPolicyAssociation
func OnReportObservedEventTriggersForIndividualUEPolicyAssociation(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)
	
	polAssoId := ctx.Param("polAssoId")
	if len(polAssoId) == 0 {
		//polAssoId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title: "Bad request",
			Status: http.StatusBadRequest,
			Detail: "polAssoId is required",
		}))
		return
	}

	var input models.PolicyAssociationUpdateRequest

	var apierr *sbi.ApiError
	var successCode int32
	var result models.PolicyUpdate

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.UEPC_HandleReportObservedEventTriggersForIndividualUEPolicyAssociation(polAssoId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}
	

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}


//sbi producer handler for CreateIndividualUEPolicyAssociation
func OnCreateIndividualUEPolicyAssociation(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)
	

	var input models.PolicyAssociationRequest

	var apierr *sbi.ApiError
	var successCode int32
	var result models.PolicyAssociation

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.UEPC_HandleCreateIndividualUEPolicyAssociation(input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}
	

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}


type Producer interface {
	UEPC_HandleDeleteIndividualUEPolicyAssociation(polAssoId string) (successCode int32, err *sbi.ApiError)
	UEPC_HandleReadIndividualUEPolicyAssociation(polAssoId string) (successCode int32, result models.PolicyAssociation, err *sbi.ApiError)
	UEPC_HandleReportObservedEventTriggersForIndividualUEPolicyAssociation(polAssoId string, body models.PolicyAssociationUpdateRequest) (successCode int32, result models.PolicyUpdate, err *sbi.ApiError)
	UEPC_HandleCreateIndividualUEPolicyAssociation(body models.PolicyAssociationRequest) (successCode int32, result models.PolicyAssociation, err *sbi.ApiError)
}


