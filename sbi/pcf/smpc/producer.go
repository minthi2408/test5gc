/*
Npcf_SMPolicyControl API

Session Management Policy Control Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.

API version: 1.1.8
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.
// Templates and customized generator are developed by Quang Tung Thai (tqtung@etri.re.kr)

package smpc

import (
	"etrib5gc/sbi"
	"etrib5gc/sbi/models"
	"net/http"
)

//sbi producer handler for DeleteSMPolicy
func OnDeleteSMPolicy(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	smPolicyId := ctx.Param("smPolicyId")
	if len(smPolicyId) == 0 {
		//smPolicyId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "smPolicyId is required",
		}))
		return
	}

	var input models.SmPolicyDeleteData

	var apierr *sbi.ApiError
	var successCode int32
	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, apierr = prod.SMPC_HandleDeleteSMPolicy(smPolicyId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), nil)
	}
	return
}

//sbi producer handler for GetSMPolicy
func OnGetSMPolicy(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	smPolicyId := ctx.Param("smPolicyId")
	if len(smPolicyId) == 0 {
		//smPolicyId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "smPolicyId is required",
		}))
		return
	}

	var apierr *sbi.ApiError
	var successCode int32
	var result models.SmPolicyControl

	successCode, result, apierr = prod.SMPC_HandleGetSMPolicy(smPolicyId)

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for UpdateSMPolicy
func OnUpdateSMPolicy(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	smPolicyId := ctx.Param("smPolicyId")
	if len(smPolicyId) == 0 {
		//smPolicyId is required
		resp.SetApiError(sbi.ApiErrFromProb(&models.ProblemDetails{
			Title:  "Bad request",
			Status: http.StatusBadRequest,
			Detail: "smPolicyId is required",
		}))
		return
	}

	var input models.SmPolicyUpdateContextData

	var apierr *sbi.ApiError
	var successCode int32
	var result models.SmPolicyDecision

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.SMPC_HandleUpdateSMPolicy(smPolicyId, input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

//sbi producer handler for CreateSMPolicy
func OnCreateSMPolicy(ctx sbi.RequestContext, handler interface{}) (resp sbi.Response) {
	prod := handler.(Producer)

	var input models.SmPolicyContextData

	var apierr *sbi.ApiError
	var successCode int32
	var result models.SmPolicyDecision

	if prob := ctx.DecodeRequest(&input); prob == nil {
		successCode, result, apierr = prod.SMPC_HandleCreateSMPolicy(input)
	} else {
		apierr = sbi.ApiErrFromProb(prob)
	}

	if apierr != nil {
		resp.SetApiError(apierr)
	} else {
		resp.SetBody(int(successCode), &result)
	}
	return
}

type Producer interface {
	SMPC_HandleDeleteSMPolicy(smPolicyId string, body models.SmPolicyDeleteData) (successCode int32, err *sbi.ApiError)
	SMPC_HandleGetSMPolicy(smPolicyId string) (successCode int32, result models.SmPolicyControl, err *sbi.ApiError)
	SMPC_HandleUpdateSMPolicy(smPolicyId string, body models.SmPolicyUpdateContextData) (successCode int32, result models.SmPolicyDecision, err *sbi.ApiError)
	SMPC_HandleCreateSMPolicy(body models.SmPolicyContextData) (successCode int32, result models.SmPolicyDecision, err *sbi.ApiError)
}
